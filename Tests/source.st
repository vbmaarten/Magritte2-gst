SystemOrganization addCategory: #'Magritte-Tests-Model-Accessor'!SystemOrganization addCategory: #'Magritte-Tests-Model-Core'!SystemOrganization addCategory: #'Magritte-Tests-Model-Description'!SystemOrganization addCategory: #'Magritte-Tests-Model-Memento'!SystemOrganization addCategory: #'Magritte-Tests-Model-Mocks'!SystemOrganization addCategory: #'Magritte-Tests-Model-Models'!SystemOrganization addCategory: #'Magritte-Tests-Model-Utility'!MAFileModel subclass: #MAFileModelStub	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Magritte-Tests-Model-Description'!!GRPackage class methodsFor: '*magritte-tests-model' stamp: 'lr 2/18/2010 10:29'!magritteTestsModel	^ self new		name: 'Magritte-Tests-Model';		description: 'Unit tests for the Magritte metamodel.';		addDependency: 'Magritte-Model';		url: #magritteUrl;		yourself! !TestCase subclass: #MAAdaptiveModelTest	instanceVariableNames: 'scaffolder'	classVariableNames: ''	poolDictionaries: ''	category: 'Magritte-Tests-Model-Models'!!MAAdaptiveModelTest methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:35'!descriptions	^ self scaffolder description children! !!MAAdaptiveModelTest methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:35'!scaffolder	^ scaffolder! !!MAAdaptiveModelTest methodsFor: 'running' stamp: 'lr 4/18/2007 17:58'!setUp	scaffolder := MAAdaptiveModel new.	scaffolder description		add: MAStringDescription new;		add: MANumberDescription new.	scaffolder write: 'foo' using: self descriptions first.	scaffolder write: 123 using: self descriptions second! !!MAAdaptiveModelTest methodsFor: 'tests' stamp: 'lr 3/9/2006 11:35'!testRead	self assert: (self scaffolder readUsing: self descriptions first) = 'foo'.	self assert: (self scaffolder readUsing: self descriptions second) = 123! !!MAAdaptiveModelTest methodsFor: 'tests' stamp: 'lr 3/9/2006 11:35'!testWrite	self scaffolder write: 'bar' using: self descriptions first.	self scaffolder write: 321 using: self descriptions second.	self assert: (self scaffolder readUsing: self descriptions first) = 'bar'.	self assert: (self scaffolder readUsing: self descriptions second) = 321! !TestCase subclass: #MAConditionTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Magritte-Tests-Model-Utility'!!MAConditionTest methodsFor: 'tests' stamp: 'lr 2/5/2009 21:55'!testConjunctive	| condition |	condition := (MACondition selector: #isInteger) & (MACondition selector: #positive).	self assert: (condition value: 1).	self deny: (condition value: 1.5).		self deny: (condition value: -1).	self deny: (condition value: -1.5)! !!MAConditionTest methodsFor: 'tests' stamp: 'lr 2/5/2009 21:56'!testDisjunctive	| condition |	condition := (MACondition selector: #isInteger) | (MACondition selector: #positive).	self assert: (condition value: 1).	self assert: (condition value: 1.5).		self assert: (condition value: -1).	self deny: (condition value: -1.5)! !!MAConditionTest methodsFor: 'tests' stamp: 'lr 2/5/2009 21:54'!testNegation	| condition |	condition := (MACondition selector: #isInteger) not.	self assert: (condition value: 0.6).	self deny: (condition value: 1)! !!MAConditionTest methodsFor: 'tests' stamp: 'lr 2/5/2009 21:53'!testReceiverSelector	| condition |	condition := MACondition receiver: 1 selector: #=.	self assert: (condition value: 1).	self deny: (condition value: 0)! !!MAConditionTest methodsFor: 'tests' stamp: 'lr 2/5/2009 21:52'!testSelector	| condition |	condition := MACondition selector: #isInteger.	self assert: (condition value: -1).	self assert: (condition value: 1).	self deny: (condition value: 0.5)	! !!MAConditionTest methodsFor: 'tests' stamp: 'lr 2/5/2009 21:53'!testSelectorArgument	| condition |	condition := MACondition selector: #< argument: 5.	self assert: (condition value: 1).	self deny: (condition value: 5)! !TestCase subclass: #MADescriptionBuilderTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Magritte-Tests-Model-Utility'!!MADescriptionBuilderTest class methodsFor: 'mock-descriptions' stamp: 'lr 5/17/2006 15:56'!descriptionContainer	^ super descriptionContainer label: 'mock'! !!MADescriptionBuilderTest class methodsFor: 'mock-descriptions' stamp: 'lr 5/17/2006 15:58'!descriptionContainer: aDescription	^ aDescription propertyAt: #bar put: nil; yourself! !!MADescriptionBuilderTest class methodsFor: 'mock-descriptions' stamp: 'lr 5/17/2006 15:58'!descriptionContainerFoo: aDescription	^ aDescription propertyAt: #foo put: nil; yourself! !!MADescriptionBuilderTest class methodsFor: 'mock-descriptions' stamp: 'lr 2/14/2007 09:18'!descriptionDescription	^ MAToOneRelationDescription new label: 'foo'! !!MADescriptionBuilderTest class methodsFor: 'mock-descriptions' stamp: 'lr 5/17/2006 16:00'!descriptionDescription: aDescription	^ aDescription propertyAt: #foo put: nil; yourself! !!MADescriptionBuilderTest class methodsFor: 'mock-descriptions' stamp: 'lr 5/17/2006 16:00'!descriptionDescriptionBar: aDescription	^ aDescription propertyAt: #bar put: nil; yourself! !!MADescriptionBuilderTest class methodsFor: 'mock-descriptions' stamp: 'lr 2/14/2007 09:18'!descriptionDescriptionRec: aDescription	^ aDescription reference: self description! !!MADescriptionBuilderTest methodsFor: 'running' stamp: 'lr 3/30/2009 23:05'!setUp	super setUp.	MADescriptionBuilder default flush! !!MADescriptionBuilderTest methodsFor: 'tests' stamp: 'lr 5/17/2006 15:59'!testContainer	self assert: self description label = 'mock'.	self assert: (self description hasProperty: #foo).	self assert: (self description hasProperty: #bar)! !!MADescriptionBuilderTest methodsFor: 'tests' stamp: 'lr 2/14/2007 09:18'!testDescription	self assert: self description size = 1.	self assert: self description children first label = 'foo'.	self assert: (self description children first hasProperty: #foo).	self assert: (self description children first hasProperty: #bar)! !!MADescriptionBuilderTest methodsFor: 'tests' stamp: 'lr 8/23/2008 12:01'!testExtension	| description |	description := MAMockAddress new description		detect: [ :each | each accessor selector = #place ].	self assert: description isRequired.	self assert: description isVisible not! !!MADescriptionBuilderTest methodsFor: 'tests' stamp: 'lr 8/23/2008 12:03'!testNilled	| description |	description := MAMockAddress new description.	self assert: description size = 3! !!MADescriptionBuilderTest methodsFor: 'tests' stamp: 'lr 2/14/2007 09:19'!testRecursive	self assert: self description children first reference = self description! !TestCase subclass: #MADynamicObjectTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Magritte-Tests-Model-Utility'!!MADynamicObjectTest methodsFor: 'tests' stamp: 'jf 9/17/2009 15:42'!testCalculated	| object dummy |	object := [ Time millisecondClockValue ] magritteDynamicObject.	dummy := object yourself.	(Delay forMilliseconds: 2) wait.	self assert: dummy < object yourself! !!MADynamicObjectTest methodsFor: 'tests' stamp: 'jf 9/17/2009 15:42'!testCollection	| object |	object := [ OrderedCollection with: 1 with: 2 ] magritteDynamicObject.	self assert: object size = 2.	self assert: object first = 1.	self assert: object second = 2.	object add: 3.	self assert: object size = 2.	self assert: object first = 1.	self assert: object second = 2! !!MADynamicObjectTest methodsFor: 'tests' stamp: 'jf 9/17/2009 15:43'!testConstant	| object |	object := [ self ] magritteDynamicObject.	self assert: object = self.	object := [ 123 ] magritteDynamicObject.	self assert: object = 123! !!MADynamicObjectTest methodsFor: 'tests' stamp: 'jf 9/17/2009 15:42'!testCopy	| object first second |	object := [ Time millisecondClockValue ] magritteDynamicObject copy.	first := object yourself.	(Delay forMilliseconds: 2) wait.	second := object yourself.	self assert: first < second! !!MADynamicObjectTest methodsFor: 'tests' stamp: 'jf 9/17/2009 15:42'!testCounter	| object counter |	counter := nil.	object := [		counter := counter isNil			ifTrue: [ 1 ]			ifFalse: [ counter := counter + 1 ] ]		magritteDynamicObject.	self assert: object = 1.	self assert: object yourself = 2.	self assert: object yourself yourself = 3! !!MADynamicObjectTest methodsFor: 'tests' stamp: 'jf 9/17/2009 15:42'!testDynamic	| object collection |	collection := nil.	object := [		collection isNil			ifTrue: [ collection := OrderedCollection with: 1 with: 2 ]			ifFalse: [ collection ] ]		magritteDynamicObject.	self assert: object size = 2.	self assert: object first = 1.	self assert: object second = 2.	object add: 3.	self assert: object size = 3.	self assert: object first = 1.	self assert: object second = 2.	self assert: object third = 3! !!MADynamicObjectTest methodsFor: 'tests' stamp: 'lr 11/25/2010 23:26'!testException	| object |	object := [ 1 / 0 ] magritteDynamicObject.	self 		should: [ object greaseString ]		raise: ZeroDivide! !!MADynamicObjectTest methodsFor: 'tests' stamp: 'jf 9/17/2009 15:43'!testNilOrNotNil	| object |	object := [ 1 ] magritteDynamicObject.	self deny: object isNil.	self assert: object notNil.	object := [ nil ] magritteDynamicObject.	self assert: object isNil.	self deny: object notNil! !TestCase subclass: #MAExtensionsTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Magritte-Tests-Model-Utility'!!MAExtensionsTest methodsFor: 'helpers' stamp: 'jf 9/17/2009 17:28'!does: aCollection haveEqualElementsTo: anotherCollection	aCollection size = anotherCollection size ifFalse: [ ^ false ].	1 to: aCollection size do: [ :index |		(aCollection at: index) = (anotherCollection at: index)			ifFalse: [ ^ false ] ].		^ true! !!MAExtensionsTest methodsFor: 'tests-string' stamp: 'jf 9/30/2009 01:10'!testAsString	self assert: Object new greaseString = Object new printString.	self assert: 'Hello World' greaseString = 'Hello World'.	self assert: 123 greaseString = '123'! !!MAExtensionsTest methodsFor: 'tests-collection' stamp: 'lr 5/14/2008 20:34'!testCopyWithAll	| col res |	col := #( a b ).	res := col copyWithAll: #( c d ).	self assert: res = #( a b c d ).	self deny: col == res.	col := Set with: #a with: #b.	res := col copyWithAll: #( c d ).	self assert: (res size = 4).	self assert: (res includes: #a).	self assert: (res includes: #b).	self assert: (res includes: #c).	self assert: (res includes: #d).	self deny: col == res.	col := OrderedCollection with: #a with: #b.	res := col copyWithAll: #( c d ).	self assert: res = (OrderedCollection with: #a with: #b with: #c with: #d).	self deny: col == res! !!MAExtensionsTest methodsFor: 'tests-collection' stamp: 'trs 9/28/2009 19:46'!testCopyWithoutFirst	| col res |	col := #( a b a c ).	res := col copyWithoutFirstOccurrenceOf: #a.	self assert: res = #( b a c ).	self deny: col == res.	col := Set with: #a with: #b with: #c.	res := col copyWithoutFirstOccurrenceOf: #a.	self assert: res size = 2.	self assert: (res includes: #b).	self assert: (res includes: #c).	self deny: col == res! !!MAExtensionsTest methodsFor: 'tests-integer' stamp: 'lr 3/9/2006 11:34'!testFileSize	self assert: (1000) asFileSize = '1000 B'.	self assert: (1024) asFileSize = '1 KB'.	self assert: (1000 * 1000) asFileSize = '976 KB'.	self assert: (1024 * 1024) asFileSize = '1 MB'.	self assert: (1000 * 1000 * 1000) asFileSize = '953 MB'.	self assert: (1024 * 1024 * 1024) asFileSize = '1 GB'.	self assert: (1000 * 1000 * 1000 * 1000) asFileSize = '931 GB'.	self assert: (1024 * 1024 * 1024 * 1024) asFileSize = '1 TB'.	" etc "! !!MAExtensionsTest methodsFor: 'tests-collection' stamp: 'jf 9/17/2009 17:24'!testHasEqualElements	| one two |	one := #( 1 2 3 ).	two := #( 1 2 3 ) asOrderedCollection.	self assert: (self does: one haveEqualElementsTo: two).	self assert: (self does: two haveEqualElementsTo: one).		two := #( 1 2 4 ).	self deny: (self does: one haveEqualElementsTo: two).	self deny: (self does: two haveEqualElementsTo: one).		two := #( 1 2 3 4 ).	self deny: (self does: one haveEqualElementsTo: two).	self deny: (self does: two haveEqualElementsTo: one).	! !!MAExtensionsTest methodsFor: 'tests-collection' stamp: 'AvO 3/12/2012 14:59'!testIntersection	"Added #asArray for VASt compatibility."	| group |	group := #( 1 2 3 ).		self assert: (self does: (group intersection: group) asArray haveEqualElementsTo: group).	self assert: (self does: (group intersection: #( )) asArray haveEqualElementsTo: #( )).	self assert: (self does: (group intersection: #( 4 5 )) asArray haveEqualElementsTo: #( )).	self assert: (self does: (group intersection: #( 1 3 4 5 )) asArray haveEqualElementsTo: #( 1 3 )).	self assert: (self does: (group intersection: #( 2 )) asArray haveEqualElementsTo: #( 2 ))! !!MAExtensionsTest methodsFor: 'tests-collection' stamp: 'lr 8/13/2008 23:50'!testIsCollection	self deny: Object new isCollection.	self deny: nil isCollection.	self deny: 123 isCollection.	self assert: 'abc' isCollection.	self assert: #(a b c) isCollection! !!MAExtensionsTest methodsFor: 'tests-string' stamp: 'lr 8/13/2008 23:52'!testIsUnary	self assert: #testIsUnary isUnary.	self deny: #+ isUnary.	self deny: #with:with: isUnary.	! !!MAExtensionsTest methodsFor: 'tests-string' stamp: 'lr 3/30/2009 23:08'!testLines	self assert: ('') lines = #().	self assert: ('foo') lines = #('foo').	self assert: ('foo' , (String with: Character cr) , 'bar') lines = #('foo' 'bar').	self assert: ('foo' , (String with: Character cr with: Character lf) , 'bar') lines = #('foo' 'bar')! !!MAExtensionsTest methodsFor: 'tests-string' stamp: 'lr 3/9/2006 11:34'!testMatches	self assert: ('' matches: '').	self assert: ('zort' matches: '').	self assert: ('zort' matches: 'o').	self assert: ('zort' matches: 'O').	self assert: ('zort' matches: '*').	self assert: ('mobaz' matches: '*baz').	self deny: ('mobazo' matches: '*baz').	self assert: ('mobazo' matches: '*baz*').	self deny: ('mozo' matches: '*baz*').	self assert: ('foozo' matches: 'foo*').	self deny: ('bozo' matches: 'foo*').	self assert: ('foo23baz' matches: 'foo*baz').	self assert: ('foobaz' matches: 'foo*baz').	self deny: ('foo23bazo' matches: 'foo*baz').	self assert: ('Foo' matches: 'foo').	self deny: ('foobazort' matches: 'foo*baz*zort').	self assert: ('foobazzort' matches: 'foo*baz*zort').	self assert: ('afoo3zortthenfoo3zort' matches: '*foo#zort').	self assert: ('afoodezortorfoo3zort' matches: '*foo*zort')! !!MAExtensionsTest methodsFor: 'tests-collection' stamp: 'lr 3/9/2006 11:34'!testMoveDown	| col |	col := Array with: 1 with: 2 with: 3.	self assert: (col moveDown: 1) = 2.	self assert: col = #( 2 1 3 ).	self assert: (col moveDown: 1) = 3.	self assert: col = #( 2 3 1 ).	self assert: (col moveDown: 1) = 3.	self assert: col = #( 2 3 1 ).	self assert: (col moveDown: 0) = 0.	self assert: col = #( 2 3 1 )! !!MAExtensionsTest methodsFor: 'tests-collection' stamp: 'lr 3/9/2006 11:34'!testMoveUp	| col |	col := Array with: 1 with: 2 with: 3.	self assert: (col moveUp: 3) = 2.	self assert: col = #( 1 3 2 ).	self assert: (col moveUp: 3) = 1.	self assert: col = #( 3 1 2 ).	self assert: (col moveUp: 3) = 1.	self assert: col = #( 3 1 2 ).	self assert: (col moveUp: 0) = 0.	self assert: col = #( 3 1 2 )! !!MAExtensionsTest methodsFor: 'tests-collection' stamp: 'lr 9/23/2010 20:50'!testReduce	self should: [ #() reduce: [ :a :b | a ] ] raise: Error.	self assert: ((1 to: 9) reduce: [ :a :b | a ]) = 1.	self assert: ((1 to: 9) reduce: [ :a :b | b ]) = 9.	self assert: ((1 to: 9) reduce: [ :a :b | a + b ]) = 45.	self assert: ((1 to: 9) reduce: [ :a :b | a * b ]) = 362880.	self assert: (#('a' 'b' 'c') reduce: [ :a :b | a , ' ' , b ]) = 'a b c'.	self assert: (#('a' 'b' 'c') reduce: [ :a :b | b , ' ' , a ]) = 'c b a'! !!MAExtensionsTest methodsFor: 'tests-collection' stamp: 'jf 9/17/2009 17:26'!testSort	| array |	array := Array with: 2 with: 3 with: 1.	array sort: [ :a :b | a < b ].	self assert: (self does: array haveEqualElementsTo: #( 1 2 3 )).	array sort: [ :a :b | a > b ].	self assert: (self does: array haveEqualElementsTo: #( 3 2 1 )).! !!MAExtensionsTest methodsFor: 'tests-string' stamp: 'lr 8/14/2008 00:09'!testSubstringCaseSensitive	self deny: ('' includesSubstring: '' caseSensitive: true).	self deny: ('' includesSubstring: '' caseSensitive: false).	self deny: ('abc' includesSubstring: '' caseSensitive: true).	self deny: ('abc' includesSubstring: '' caseSensitive: false).	self deny: ('' includesSubstring: 'abc' caseSensitive: true).	self deny: ('' includesSubstring: 'abc' caseSensitive: false).	self deny: ('abc' includesSubstring: 'aa' caseSensitive: true).	self deny: ('abc' includesSubstring: 'cc' caseSensitive: false).	self deny: ('abc' includesSubstring: 'aB' caseSensitive: true).	self assert: ('abc' includesSubstring: 'a' caseSensitive: true).	self assert: ('abc' includesSubstring: 'c' caseSensitive: false).	self assert: ('abc' includesSubstring: 'aB' caseSensitive: false).	self assert: ('abc' includesSubstring: 'AbC' caseSensitive: false).	self assert: ('abc' includesSubstring: 'ABC' caseSensitive: false).	self assert: ('abc' includesSubstring: 'aBc' caseSensitive: false)! !!MAExtensionsTest methodsFor: 'tests-time' stamp: 'lr 8/14/2008 11:46'!testTimePrintOn	| stream |	stream := String new writeStream.	Time now print24: true showSeconds: true on: stream.		self assert: (stream contents size) = 8.	self assert: (stream contents at: 3) = $:.	self assert: (stream contents at: 6) = $:! !!MAExtensionsTest methodsFor: 'tests-errors' stamp: 'jf 10/28/2009 15:26'!testValidationError	| result |	result := [ MARequiredError signal: 'some message' ]		on: MARequiredError		do: [ :err | err return: err greaseString ].	self assert: result = 'some message'.	result := [		MARequiredError 			description: (MAStringDescription new 				label: 'label';				yourself) 			signal: 'some message' ] 		on: MARequiredError		do: [ :err | err return: err greaseString ].	self assert: result = 'label: some message'! !TestCase subclass: #MAFileModelTest	instanceVariableNames: 'model'	classVariableNames: ''	poolDictionaries: ''	category: 'Magritte-Tests-Model-Models'!!MAFileModelTest class methodsFor: 'testing' stamp: 'lr 9/30/2007 18:30'!isAbstract	^ self name = #MAFileModelTest! !!MAFileModelTest methodsFor: 'private' stamp: 'lr 9/30/2007 18:18'!actualClass	^ self subclassResponsibility! !!MAFileModelTest methodsFor: 'running' stamp: 'lr 9/30/2007 18:16'!setUp	super setUp.	model := self actualClass new! !!MAFileModelTest methodsFor: 'running' stamp: 'lr 9/30/2007 18:16'!tearDown	model finalize! !!MAFileModelTest methodsFor: 'tests' stamp: 'nfr 10/17/2007 12:37'!testComparing	| other |	other := self actualClass new.	other 		filename: 'something.dat';		contents: (ByteArray with: 1 with: 2 with: 3).	self assert: model = model.		self deny: model = other.	self deny: other = model.	other finalize.	"should be in tearDown;  for now, at least let's discard when we pass"! !!MAFileModelTest methodsFor: 'tests' stamp: 'lr 9/30/2007 18:21'!testContents	self assert: model contents isEmpty.	model contents: (ByteArray with: 1 with: 2 with: 3).	self assert: model contents = (ByteArray with: 1 with: 2 with: 3).	self assert: model filesize = 3! !!MAFileModelTest methodsFor: 'tests' stamp: 'lr 9/30/2007 18:17'!testFilename	self assert: model filename = 'unknown'.	self assert: model extension isEmpty.	model filename: 'test.txt'.	self assert: model filename = 'test.txt'.	self assert: model extension = 'txt'! !!MAFileModelTest methodsFor: 'tests' stamp: 'lr 9/30/2007 18:17'!testIsEmpty	self assert: model isEmpty.	model filename: 'foo.txt'.	self assert: model isEmpty.	model mimetype: 'text/plain'.	self assert: model isEmpty.	model contents: 'hello'.	self deny: model isEmpty! !!MAFileModelTest methodsFor: 'tests' stamp: 'lr 9/30/2007 18:27'!testMimetype	self assert: model mimetype = 'application/octet-stream'.	self assert: model maintype = 'application'.	self assert: model subtype = 'octet-stream'.	model mimetype: 'text/html'.	self assert: model mimetype = 'text/html'.	self assert: model maintype = 'text'.	self assert: model subtype = 'html'! !!MAFileModelTest methodsFor: 'tests' stamp: 'lr 9/30/2007 18:17'!testMimetypeApplication	model mimetype: 'application/pdf'.	self assert: model isApplication.	self deny: model isAudio.	self deny: model isImage.	self deny: model isText.	self deny: model isVideo! !!MAFileModelTest methodsFor: 'tests' stamp: 'lr 9/30/2007 18:17'!testMimetypeAudio	model mimetype: 'audio/mpeg'.	self deny: model isApplication.	self assert: model isAudio.	self deny: model isImage.	self deny: model isText.	self deny: model isVideo! !!MAFileModelTest methodsFor: 'tests' stamp: 'lr 9/30/2007 18:17'!testMimetypeDefault	self assert: model isApplication.	self deny: model isAudio.	self deny: model isImage.	self deny: model isText.	self deny: model isVideo! !!MAFileModelTest methodsFor: 'tests' stamp: 'lr 9/30/2007 18:18'!testMimetypeImage	model mimetype: 'image/png'.	self deny: model isApplication.	self deny: model isAudio.	self assert: model isImage.	self deny: model isText.	self deny: model isVideo! !!MAFileModelTest methodsFor: 'tests' stamp: 'lr 9/30/2007 18:18'!testMimetypeText	model mimetype: 'text/xml'.	self deny: model isApplication.	self deny: model isAudio.	self deny: model isImage.	self assert: model isText.	self deny: model isVideo! !!MAFileModelTest methodsFor: 'tests' stamp: 'lr 9/30/2007 18:18'!testMimetypeVideo	model mimetype: 'video/mpeg'.		self deny: model isApplication.	self deny: model isAudio.	self deny: model isImage.	self deny: model isText.	self assert: model isVideo! !MAFileModelTest subclass: #MAMemoryFileModelTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Magritte-Tests-Model-Models'!!MAMemoryFileModelTest methodsFor: 'private' stamp: 'lr 9/30/2007 18:19'!actualClass	^ MAMemoryFileModel! !TestCase subclass: #MAObjectTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Magritte-Tests-Model-Core'!MAObjectTest subclass: #MAAccessorTest	instanceVariableNames: 'accessor value'	classVariableNames: ''	poolDictionaries: ''	category: 'Magritte-Tests-Model-Accessor'!!MAAccessorTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!isAbstract	^ true! !!MAAccessorTest methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:34'!accessor	^ accessor! !!MAAccessorTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!accessorInstance	self subclassResponsibility! !!MAAccessorTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!actualClass	^ MAAccessor! !!MAAccessorTest methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:34'!instance	^ accessor! !!MAAccessorTest methodsFor: 'running' stamp: 'lr 3/9/2006 11:34'!setUp	super setUp.	accessor := self accessorInstance! !!MAAccessorTest methodsFor: 'tests-identity' stamp: 'lr 4/10/2008 13:36'!testAsAccessor	self assert: self instance asAccessor = self instance.	self assert: self instance asAccessor == self instance! !!MAAccessorTest methodsFor: 'tests-testing' stamp: 'lr 3/9/2006 11:34'!testCanRead	self subclassResponsibility! !!MAAccessorTest methodsFor: 'tests-testing' stamp: 'lr 3/9/2006 11:34'!testCanWrite	self subclassResponsibility! !!MAAccessorTest methodsFor: 'tests' stamp: 'lr 3/9/2006 11:34'!testRead	self subclassResponsibility! !!MAAccessorTest methodsFor: 'tests-identity' stamp: 'jf 9/30/2009 00:19'!testStore	| evaluator |	evaluator := GRPlatform current magritteEvaluatorClassFor: self actualClass.	self assert: (evaluator evaluate: self accessor storeString) = self accessor! !!MAAccessorTest methodsFor: 'tests' stamp: 'lr 3/9/2006 11:34'!testWrite	self subclassResponsibility! !!MAAccessorTest methodsFor: 'accessing-model' stamp: 'lr 3/9/2006 11:34'!value	^ value! !!MAAccessorTest methodsFor: 'accessing-model' stamp: 'lr 3/9/2006 11:34'!value: anObject	value := anObject! !MAAccessorTest subclass: #MADelegatorAccessorTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Magritte-Tests-Model-Accessor'!MADelegatorAccessorTest subclass: #MAChainAccessorTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Magritte-Tests-Model-Accessor'!!MAChainAccessorTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!isAbstract	^ false! !!MAChainAccessorTest methodsFor: 'private' stamp: 'lr 5/6/2008 18:11'!accessorInstance	^ self actualClass accessors: #( holder contents value )! !!MAChainAccessorTest methodsFor: 'private' stamp: 'lr 5/15/2006 20:49'!actualClass	^ MAChainAccessor! !!MAChainAccessorTest methodsFor: 'private' stamp: 'lr 8/14/2008 12:25'!holder	^ MAValueHolder on: self! !!MAChainAccessorTest methodsFor: 'tests' stamp: 'lr 3/9/2006 11:34'!testAccessor	self accessor accessor: self.	self assert: self accessor accessor = self! !!MAChainAccessorTest methodsFor: 'tests' stamp: 'lr 5/6/2008 18:19'!testAsAccessor	super testAsAccessor.		accessor := #(value) asAccessor.	self assert: (accessor isKindOf: MASelectorAccessor).	self assert: (accessor selector = #value).		accessor := #(value contents) asAccessor.	self assert: (accessor isKindOf: MAChainAccessor).	self assert: (accessor next isKindOf: MASelectorAccessor).	self assert: (accessor next selector = #value).	self assert: (accessor accessor isKindOf: MASelectorAccessor).	self assert: (accessor accessor selector = #contents)! !!MAChainAccessorTest methodsFor: 'tests-testing' stamp: 'lr 5/6/2008 18:13'!testCanRead	self assert: (self accessor canRead: self).	self accessor accessor accessor readSelector: #zork.	self deny: (self accessor canRead: self)! !!MAChainAccessorTest methodsFor: 'tests-testing' stamp: 'lr 5/6/2008 18:13'!testCanWrite	self assert: (self accessor canWrite: self).	self accessor accessor accessor writeSelector: #zork.	self deny: (self accessor canWrite: self)! !!MAChainAccessorTest methodsFor: 'tests' stamp: 'lr 5/6/2008 18:11'!testKind	self assert: (self accessor class = MAChainAccessor).	self assert: (self accessor next class = MASelectorAccessor).	self assert: (self accessor accessor class = MAChainAccessor).	self assert: (self accessor accessor next class = MASelectorAccessor).	self assert: (self accessor accessor accessor class = MASelectorAccessor)! !!MAChainAccessorTest methodsFor: 'tests' stamp: 'lr 8/2/2008 18:00'!testNext	| next |	next := #foo asAccessor.	self accessor next: next.	self assert: self accessor next = next! !!MAChainAccessorTest methodsFor: 'tests' stamp: 'lr 3/9/2006 11:34'!testRead	self value: 123.	self assert: (self accessor read: self) = 123.	self value: '12'.	self assert: (self accessor read: self) = '12'! !!MAChainAccessorTest methodsFor: 'tests' stamp: 'lr 5/6/2008 18:12'!testSelector	self assert: self accessor next selector = #holder.	self assert: self accessor accessor next selector = #contents.	self assert: self accessor accessor accessor selector = #value! !!MAChainAccessorTest methodsFor: 'tests' stamp: 'lr 3/9/2006 11:34'!testWrite	self accessor write: 123 to: self.	self assert: self value = 123.	self accessor write: '123' to: self.	self assert: self value = '123'! !!MADelegatorAccessorTest class methodsFor: 'testing' stamp: 'lr 2/14/2008 09:47'!isAbstract	^ false! !!MADelegatorAccessorTest methodsFor: 'private' stamp: 'lr 2/14/2008 09:51'!accessorInstance	^ self actualClass on: (MASelectorAccessor selector: #value)! !!MADelegatorAccessorTest methodsFor: 'private' stamp: 'lr 2/14/2008 09:47'!actualClass	^ MADelegatorAccessor! !!MADelegatorAccessorTest methodsFor: 'tests-testing' stamp: 'lr 2/14/2008 09:50'!testCanRead	self assert: (self accessor canRead: self).	self accessor next readSelector: #zork.	self deny: (self accessor canRead: self)! !!MADelegatorAccessorTest methodsFor: 'tests-testing' stamp: 'lr 2/14/2008 09:52'!testCanWrite	self assert: (self accessor canWrite: self).	self accessor next writeSelector: #zork:.	self deny: (self accessor canWrite: self)! !!MADelegatorAccessorTest methodsFor: 'tests' stamp: 'lr 2/14/2008 09:52'!testRead	self value: 123.	self assert: (self accessor read: self) = 123.	self value: '123'.	self assert: (self accessor read: self) = '123'! !!MADelegatorAccessorTest methodsFor: 'tests' stamp: 'lr 2/14/2008 09:52'!testWrite	self accessor write: 123 to: self.	self assert: self value = 123.	self accessor write: '123' to: self.	self assert: self value = '123'! !MAAccessorTest subclass: #MADictionaryAccessorTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Magritte-Tests-Model-Accessor'!!MADictionaryAccessorTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!isAbstract	^ false! !!MADictionaryAccessorTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!accessorInstance	^ self actualClass key: #value! !!MADictionaryAccessorTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!actualClass	^ MADictionaryAccessor! !!MADictionaryAccessorTest methodsFor: 'accessing' stamp: 'lr 10/27/2007 12:18'!at: aKey ifAbsent: aBlock	^ aKey = #value 		ifTrue: [ value ]		ifFalse: [ aBlock value ]! !!MADictionaryAccessorTest methodsFor: 'accessing' stamp: 'lr 10/27/2007 12:18'!at: aKey put: aValue	self assert: aKey = #value.	^ value := aValue! !!MADictionaryAccessorTest methodsFor: 'tests-testing' stamp: 'lr 10/27/2007 12:20'!testCanRead	self assert: (self accessor canRead: self).	self accessor key: #zork.	self assert: (self accessor canRead: self)! !!MADictionaryAccessorTest methodsFor: 'tests-testing' stamp: 'lr 3/9/2006 11:34'!testCanWrite	self assert: (self accessor canWrite: self)! !!MADictionaryAccessorTest methodsFor: 'tests' stamp: 'lr 3/9/2006 11:34'!testKey	self accessor key: #other.	self assert: self accessor key = #other! !!MADictionaryAccessorTest methodsFor: 'tests' stamp: 'lr 3/9/2006 11:34'!testRead	self value: 123.	self assert: (self accessor read: self) = 123.	self value: '12'.	self assert: (self accessor read: self) = '12'! !!MADictionaryAccessorTest methodsFor: 'tests' stamp: 'lr 3/9/2006 11:34'!testWrite	self accessor write: 123 to: self.	self assert: self value = 123.	self accessor write: '123' to: self.	self assert: self value = '123'! !MAAccessorTest subclass: #MAIdentityAccessorTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Magritte-Tests-Model-Accessor'!!MAIdentityAccessorTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!isAbstract	^ false! !!MAIdentityAccessorTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!accessorInstance	^ self actualClass new! !!MAIdentityAccessorTest methodsFor: 'private' stamp: 'lr 4/10/2008 13:55'!actualClass	^ MAIdentityAccessor! !!MAIdentityAccessorTest methodsFor: 'tests-testing' stamp: 'lr 3/9/2006 11:34'!testCanRead	self assert: (self accessor canRead: self)! !!MAIdentityAccessorTest methodsFor: 'tests-testing' stamp: 'lr 3/9/2006 11:34'!testCanWrite	self deny: (self accessor canWrite: self)! !!MAIdentityAccessorTest methodsFor: 'tests' stamp: 'lr 3/9/2006 11:34'!testRead	self assert: (self accessor read: 123) = 123! !!MAIdentityAccessorTest methodsFor: 'tests' stamp: 'lr 3/5/2007 13:50'!testWrite	self		should: [ self accessor write: 123 to: self ]		raise: MAWriteError.	self assert: self value isNil! !MAAccessorTest subclass: #MANullAccessorTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Magritte-Tests-Model-Accessor'!!MANullAccessorTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!isAbstract	^ false! !!MANullAccessorTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!accessorInstance	^ self actualClass new! !!MANullAccessorTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!actualClass	^ MANullAccessor! !!MANullAccessorTest methodsFor: 'tests-identity' stamp: 'lr 4/10/2008 13:37'!testAsAccessor	super testAsAccessor.	self assert: (nil asAccessor isKindOf: self actualClass)! !!MANullAccessorTest methodsFor: 'tests-testing' stamp: 'lr 3/9/2006 11:34'!testCanRead	self deny: (self accessor canRead: self)! !!MANullAccessorTest methodsFor: 'tests-testing' stamp: 'lr 3/9/2006 11:34'!testCanWrite	self deny: (self accessor canWrite: nil)! !!MANullAccessorTest methodsFor: 'tests' stamp: 'lr 3/5/2007 13:50'!testRead	self		should: [ self accessor read: self ]		raise: MAReadError! !!MANullAccessorTest methodsFor: 'tests' stamp: 'lr 3/5/2007 13:50'!testWrite	self		should: [ self accessor write: 123 to: self ]		raise: MAWriteError.	self assert: self value isNil! !MAAccessorTest subclass: #MAPluggableAccessorTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Magritte-Tests-Model-Accessor'!!MAPluggableAccessorTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!isAbstract	^ false! !!MAPluggableAccessorTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!accessorInstance	^ self actualClass		read: [ :model | model value ]		write: [ :model :object | model value: object ]! !!MAPluggableAccessorTest methodsFor: 'private' stamp: 'lr 5/14/2008 20:29'!actualClass	^ MAPluggableAccessor! !!MAPluggableAccessorTest methodsFor: 'tests-testing' stamp: 'lr 3/9/2006 11:34'!testCanRead	self assert: (self instance canRead: self).	self instance readBlock: nil.	self deny: (self instance canRead: self)! !!MAPluggableAccessorTest methodsFor: 'tests-testing' stamp: 'lr 3/9/2006 11:34'!testCanWrite	self assert: (self instance canWrite: nil).	self assert: (self instance canWrite: 123).	self assert: (self instance canWrite: self).	self instance writeBlock: nil.	self deny: (self instance canWrite: nil).	self deny: (self instance canWrite: 123).	self deny: (self instance canWrite: self)! !!MAPluggableAccessorTest methodsFor: 'tests' stamp: 'lr 6/15/2006 08:52'!testRead	self value: 123.	self assert: (self accessor read: self) = 123.	self value: '12'.	self assert: (self accessor read: self) = '12'! !!MAPluggableAccessorTest methodsFor: 'tests' stamp: 'lr 3/9/2006 11:34'!testReadBlock	self accessor readBlock: [ :model |		self assert: model = self. 123 ].	self assert: (self accessor read: self) = 123! !!MAPluggableAccessorTest methodsFor: 'tests-identity' stamp: 'lr 3/9/2006 11:34'!testStore	"The class BlockContext is not serializeable, ignore this test."! !!MAPluggableAccessorTest methodsFor: 'tests' stamp: 'lr 3/9/2006 11:34'!testWrite	self accessor write: 123 to: self.	self assert: self value = 123.	self accessor write: '123' to: self.	self assert: self value = '123'! !!MAPluggableAccessorTest methodsFor: 'tests' stamp: 'lr 3/9/2006 11:34'!testWriteBlock	self accessor writeBlock: [ :model :object |		self assert: model = self.		self assert: object = 123 ].	self accessor write: 123 to: self! !MAAccessorTest subclass: #MASelectorAccessorTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Magritte-Tests-Model-Accessor'!!MASelectorAccessorTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!isAbstract	^ false! !!MASelectorAccessorTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:35'!accessorInstance	^ self actualClass selector: #value! !!MASelectorAccessorTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:35'!actualClass	^ MASelectorAccessor! !!MASelectorAccessorTest methodsFor: 'tests-identity' stamp: 'lr 4/10/2008 13:38'!testAsAccessor	super testAsAccessor.	self assert: #value asAccessor = self instance.	self deny: #value asAccessor == self instance! !!MASelectorAccessorTest methodsFor: 'tests-testing' stamp: 'lr 2/14/2008 09:50'!testCanRead	self assert: (self accessor canRead: self).	self accessor readSelector: #zork.	self deny: (self accessor canRead: self).	self accessor readSelector: nil.	self deny: (self accessor canRead: self)! !!MASelectorAccessorTest methodsFor: 'tests-testing' stamp: 'lr 2/14/2008 09:50'!testCanWrite	self assert: (self accessor canWrite: self).	self accessor writeSelector: #zork:.	self deny: (self accessor canWrite: self).	self accessor writeSelector: nil.	self deny: (self accessor canWrite: self)! !!MASelectorAccessorTest methodsFor: 'tests' stamp: 'lr 2/14/2008 09:51'!testRead	self value: 123.	self assert: (self accessor read: self) = 123.	self value: '12'.	self assert: (self accessor read: self) = '12'! !!MASelectorAccessorTest methodsFor: 'tests' stamp: 'lr 3/9/2006 11:35'!testReadSelector	self accessor readSelector: #contents.	self assert: self accessor selector = #contents.	self assert: self accessor readSelector = #contents.	self assert: self accessor writeSelector = #value:! !!MASelectorAccessorTest methodsFor: 'tests' stamp: 'lr 3/9/2006 11:35'!testSelector	self accessor selector: #contents.	self assert: self accessor selector = #contents.	self assert: self accessor readSelector = #contents.	self assert: self accessor writeSelector = #contents:! !!MASelectorAccessorTest methodsFor: 'tests' stamp: 'lr 2/14/2008 09:51'!testWrite	self accessor write: 123 to: self.	self assert: self value = 123.	self accessor write: '123' to: self.	self assert: self value = '123'! !!MASelectorAccessorTest methodsFor: 'tests' stamp: 'lr 3/9/2006 11:35'!testWriteSelector	self accessor writeSelector: #contents:.	self assert: self accessor selector = #value.	self assert: self accessor readSelector = #value.	self assert: self accessor writeSelector = #contents:! !MAAccessorTest subclass: #MAVariableAccessorTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Magritte-Tests-Model-Accessor'!!MAVariableAccessorTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!isAbstract	^ false! !!MAVariableAccessorTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:35'!accessorInstance	^ self actualClass name: 'value'! !!MAVariableAccessorTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:35'!actualClass	^ MAVariableAccessor! !!MAVariableAccessorTest methodsFor: 'tests-testing' stamp: 'lr 3/9/2006 11:35'!testCanRead	self assert: (self accessor canRead: self).	self accessor name: 'zork'.	self deny: (self accessor canRead: self)! !!MAVariableAccessorTest methodsFor: 'tests-testing' stamp: 'lr 3/9/2006 11:35'!testCanWrite	self assert: (self accessor canWrite: self).	self accessor name: 'zork'.	self deny: (self accessor canWrite: self)! !!MAVariableAccessorTest methodsFor: 'tests' stamp: 'lr 3/9/2006 11:35'!testName	self accessor name: 'other'.	self assert: self accessor name = 'other'! !!MAVariableAccessorTest methodsFor: 'tests' stamp: 'lr 3/9/2006 11:35'!testRead	self value: 123.	self assert: (self accessor read: self) = 123.	self value: '12'.	self assert: (self accessor read: self) = '12'! !!MAVariableAccessorTest methodsFor: 'tests' stamp: 'lr 3/9/2006 11:35'!testWrite	self accessor write: 123 to: self.	self assert: self value = 123.	self accessor write: '123' to: self.	self assert: self value = '123'! !MAObjectTest subclass: #MADescriptionTest	instanceVariableNames: 'description'	classVariableNames: ''	poolDictionaries: ''	category: 'Magritte-Tests-Model-Description'!MADescriptionTest subclass: #MAContainerTest	instanceVariableNames: 'child1 child2 child3'	classVariableNames: ''	poolDictionaries: ''	category: 'Magritte-Tests-Model-Description'!!MAContainerTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!isAbstract	^ false! !!MAContainerTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!actualClass	^ MAContainer! !!MAContainerTest methodsFor: 'accessing' stamp: 'lr 4/10/2008 14:17'!child1	^ child1 ifNil: 		[ child1 := MAStringDescription new			accessor: #child1;			label: 'child1';			priority: 1;			yourself ]! !!MAContainerTest methodsFor: 'accessing' stamp: 'lr 4/10/2008 14:17'!child2	^ child2 ifNil: 		[ child2 := MAStringDescription new			accessor: #child2;			label: 'child2';			priority: 2;			yourself ]! !!MAContainerTest methodsFor: 'accessing' stamp: 'lr 4/10/2008 14:17'!child3	^ child3 ifNil: 		[ child3 := MAStringDescription new			accessor: #child3;			label: 'child3';			priority: 3;			yourself ]! !!MAContainerTest methodsFor: 'private' stamp: 'lr 7/12/2007 18:59'!exampleInstance	^ MACachedMemento new		setDescription: self description;		setCache: (Dictionary new			at: self child1 put: nil;			at: self child2 put: nil;			at: self child3 put: nil;			yourself);		yourself! !!MAContainerTest methodsFor: 'tests-adding' stamp: 'lr 3/9/2006 11:34'!testAdd	self description add: self child1.	self assert: (self description size = 1).	self assert: (self description includes: self child1).	self description add: self child2.	self assert: (self description size = 2).	self assert: (self description includes: self child1).	self assert: (self description includes: self child2)! !!MAContainerTest methodsFor: 'tests-adding' stamp: 'lr 3/9/2006 11:34'!testAddAll	self description		addAll: (Array with: self child1 with: self child2).	self assert: (self description size = 2).	self assert: (self description includes: self child1).	self assert: (self description includes: self child2)! !!MAContainerTest methodsFor: 'tests-enumerating' stamp: 'lr 3/30/2009 23:02'!testAllSatisfy	self description add: self child1; add: self child2.	self assert: (self description allSatisfy: [ :each | each = self child1 or: [ each = self child2 ] ]).	self deny: (self description allSatisfy: [ :each | each = self child1 ])! !!MAContainerTest methodsFor: 'tests-enumerating' stamp: 'lr 3/30/2009 23:01'!testAnySatisfy	self description add: self child1; add: self child2.	self assert: (self description anySatisfy: [ :each | each = self child2 ]).	self deny: (self description anySatisfy: [ :each | each isNil ])! !!MAContainerTest methodsFor: 'tests-converting' stamp: 'lr 3/9/2006 11:34'!testAsContainer	self assert: self description asContainer = self description.	self assert: self description asContainer == self description! !!MAContainerTest methodsFor: 'tests-enumerating' stamp: 'lr 3/30/2009 23:02'!testAt	self description add: self child1; add: self child2.	self assert: (self description at: 1) = self child1.	self assert: (self description at: 2) = self child2.	self should: [ self description at: 3 ] raise: Error! !!MAContainerTest methodsFor: 'tests-enumerating' stamp: 'lr 3/30/2009 23:03'!testAtIfAbsent	self description add: self child1; add: self child2.	self assert: (self description at: 1 ifAbsent: [ 'not' ]) = self child1.	self assert: (self description at: 2 ifAbsent: [ 'not' ]) = self child2.	self assert: (self description at: 3 ifAbsent: [ 'not' ]) = 'not'! !!MAContainerTest methodsFor: 'tests-accessing' stamp: 'lr 3/9/2006 11:34'!testChildren	self assert: self description children isCollection.	self assert: self description children isEmpty! !!MAContainerTest methodsFor: 'tests-enumerating' stamp: 'lr 3/21/2006 20:01'!testCollect	| collected |	self description add: self child1; add: self child2.	collected := self description collect: [ :each | each ].	self assert: self description = collected.	self deny: self description == collected.	collected := self description collect: [ :each | each copy ].	self assert: self description = collected.	self deny: self description == collected.	collected := self description collect: [ :each |		each copy			accessor: (MASelectorAccessor selector: #foo);			yourself ].	self deny: self description = collected.	self deny: self description == collected! !!MAContainerTest methodsFor: 'tests-operators' stamp: 'lr 3/21/2006 18:43'!testConcatenate	| concatenate |	concatenate := self child1 , self child2.	self assert: concatenate size = 2.	self assert: concatenate children first = self child1.	self assert: concatenate children second = self child2.	concatenate := self child1 , self child2 , self child3.	self assert: concatenate size = 3.	self assert: concatenate children first = self child1.	self assert: concatenate children second = self child2.	self assert: concatenate children third = self child3! !!MAContainerTest methodsFor: 'tests-copying' stamp: 'lr 3/9/2006 11:34'!testCopy	self description add: self child1; add: self child2.	super testCopy.	self deny: self description copy children == self description children.	self assert: self description copy children first = self description children first.	self assert: self description copy children second = self description children second! !!MAContainerTest methodsFor: 'tests-copying' stamp: 'lr 3/9/2006 11:34'!testCopyEmpty	self description add: self child1; add: self child2.	self assert: self description copyEmpty isEmpty! !!MAContainerTest methodsFor: 'tests-copying' stamp: 'lr 3/9/2006 11:34'!testCopyFromTo	| copied |	self description add: self child1; add: self child2; add: self child3.	copied := self description copyFrom: 2 to: 3.	self assert: copied ~= self description.	self assert: copied size = 2.	self assert: copied children first = self child2.	self assert: copied children second = self child3! !!MAContainerTest methodsFor: 'tests-copying' stamp: 'lr 3/30/2009 23:14'!testCopyWithout	| copied |	self description add: self child1; add: self child2; add: self child3.	copied := self description copyWithout: self child1.	self assert: copied ~= self description.	self assert: copied size = 2.	self assert: copied children first = self child2.	self assert: copied children second = self child3! !!MAContainerTest methodsFor: 'tests-copying' stamp: 'lr 3/30/2009 23:14'!testCopyWithoutAll	| copied |	self description add: self child1; add: self child2; add: self child3.	copied := self description copyWithoutAll: (Array with: self child1 with: self child3).	self assert: copied ~= self description.	self assert: copied size = 1.	self assert: copied children first = self child2! !!MAContainerTest methodsFor: 'tests-enumerating' stamp: 'lr 3/9/2006 11:34'!testDetect	self description add: self child1.	self assert: (self description		detect: [ :each | self child1 = each ]) = self child1.	self should: [ self description		detect: [ :each | self child2 = each ] ] raise: Error! !!MAContainerTest methodsFor: 'tests-enumerating' stamp: 'lr 3/9/2006 11:34'!testDetectIfNone	self description add: self child1.	self assert: (self description		detect: [ :each | self child1 = each ]		ifNone: [ 123 ]) = self child1.	self assert: (self description		detect: [ :each | self child2 = each ]		ifNone: [ 123 ]) = 123! !!MAContainerTest methodsFor: 'tests-enumerating' stamp: 'jf 9/17/2009 17:20'!testDo	| collection children |	collection := self description class defaultCollection.	self description add: self child1; add: self child2.	self description do: [ :each | collection add: each ].	children := self description children.	self assert: children size = collection size.	1 to: collection size do: [ :index |		self assert: (children at: index) = (collection at: index) ]! !!MAContainerTest methodsFor: 'tests-enumerating' stamp: 'lr 3/9/2006 11:34'!testDoSepratedBy	| collection |	collection := OrderedCollection new.	self description add: self child1; add: self child2.	self description		do: [ :each | collection add: each ]		separatedBy: [ collection add: nil ].	self assert: collection size = 3.	self assert: collection first = self child1.	self assert: collection second isNil.	self assert: collection third = self child2! !!MAContainerTest methodsFor: 'tests-testing' stamp: 'lr 3/9/2006 11:34'!testEmpty	self assert: self description isEmpty.	self description add: self child1.	self deny: self description isEmpty! !!MAContainerTest methodsFor: 'tests-testing' stamp: 'lr 3/9/2006 11:34'!testHasChildren	super testHasChildren.	self description add: self child1.	self assert: self description hasChildren! !!MAContainerTest methodsFor: 'tests-testing' stamp: 'lr 3/9/2006 11:34'!testIncludes	self deny: (self description includes: self child1).	self description add: self child1.	self assert: (self description includes: self child1)! !!MAContainerTest methodsFor: 'tests-enumerating' stamp: 'lr 3/9/2006 11:34'!testInjectInto	self description add: self child1; add: self child2.	self assert: (self description		inject: 'start'		into: [ :result :each | result , ' ' , each label ]) = 'start child1 child2'! !!MAContainerTest methodsFor: 'tests-operators' stamp: 'lr 3/9/2006 11:34'!testIntersection	| a b union |	a := self child1 , self child2.	b := self child2 , self child3.	union := a intersection: b.	self assert: (union size) = 1.	self deny: (union includes: self child1).	self assert: (union includes: self child2).	self deny: (union includes: self child3)! !!MAContainerTest methodsFor: 'tests-testing' stamp: 'lr 3/9/2006 11:34'!testIsContainer	self assert: self description isContainer! !!MAContainerTest methodsFor: 'tests-enumerating' stamp: 'lr 4/10/2008 14:07'!testKeysAndValuesDo	self description		add: self child1;		add: self child2.	self description keysAndValuesDo: 		[ :index :each | 		index = 1 			ifTrue: [ self assert: self child1 = each ]			ifFalse: 				[ index = 2 					ifTrue: [ self assert: self child2 = each ]					ifFalse: [ self assert: false ] ] ]! !!MAContainerTest methodsFor: 'tests-moving' stamp: 'lr 3/9/2006 11:34'!testMoveDown	self description add: self child1; add: self child2.	self assert: self description children first = self child1.	self assert: self description children second = self child2.	self description moveDown: self child1.	self assert: self description children first = self child2.	self assert: self description children second = self child1.	self description moveDown: self child1.	self assert: self description children first = self child2.	self assert: self description children second = self child1! !!MAContainerTest methodsFor: 'tests-moving' stamp: 'lr 3/9/2006 11:34'!testMoveUp	self description add: self child1; add: self child2.	self assert: self description children first = self child1.	self assert: self description children second = self child2.	self description moveUp: self child2.	self assert: self description children first = self child2.	self assert: self description children second = self child1.	self description moveUp: self child2.	self assert: self description children first = self child2.	self assert: self description children second = self child1! !!MAContainerTest methodsFor: 'tests-validating' stamp: 'lr 7/12/2007 19:14'!testNoFailingValidation	| example |	self description		add: self child1;		add: self child2.	example := self exampleInstance.	self		shouldnt: [ example validate ]		raise: MAValidationError! !!MAContainerTest methodsFor: 'tests-enumerating' stamp: 'lr 3/30/2009 23:02'!testNoneSatisfy	self description add: self child1; add: self child2.	self assert: (self description noneSatisfy: [ :each | each isNil ])! !!MAContainerTest methodsFor: 'tests-testing' stamp: 'lr 3/9/2006 11:34'!testNotEmpty	self deny: self description notEmpty.	self description add: self child1.	self assert: self description notEmpty! !!MAContainerTest methodsFor: 'tests-validating' stamp: 'lr 11/6/2009 15:11'!testOneFailingValidation	| example |	self description		add: self child1;		add: (self child2			addCondition: [ :v | false ];			beRequired;			yourself).	example := self exampleInstance.	self		should: [ example validate ]		raise: MAValidationError.	[ example validate ]		on: MAValidationError		do: [ :err |			self assert: err class = MAMultipleErrors.			self assert: err tag = self description.			self assert: err collection size = 1.			self assert: err collection first tag = self child2 ]! !!MAContainerTest methodsFor: 'tests-enumerating' stamp: 'lr 3/9/2006 11:34'!testReject	| rejected |	self description add: self child1; add: self child2.	rejected := self description reject: [ :each | false ].	self assert: self description = rejected.	rejected := self description reject: [ :each | true ].	self assert: rejected isEmpty! !!MAContainerTest methodsFor: 'tests-removing' stamp: 'lr 3/9/2006 11:34'!testRemove	self description add: self child1; add: self child2.	self description remove: self child1.	self assert: self description size = 1.	self deny: (self description includes: self child1).	self assert: (self description includes: self child2).	self description remove: self child2.	self assert: self description isEmpty! !!MAContainerTest methodsFor: 'tests-removing' stamp: 'lr 3/9/2006 11:34'!testRemoveAll	self description add: self child1; add: self child2.	self description removeAll.	self assert: self description isEmpty! !!MAContainerTest methodsFor: 'tests-enumerating' stamp: 'lr 3/9/2006 11:34'!testSelect	| selected |	self description add: self child1; add: self child2.	selected := self description select: [ :each | true ].	self assert: self description = selected.	selected := self description select: [ :each | false ].	self assert: selected isEmpty! !!MAContainerTest methodsFor: 'tests-accessing' stamp: 'lr 3/9/2006 11:34'!testSize	self assert: self description size isZero.	self description add: self child1.	self assert: self description size = 1.	self description add: self child2.	self assert: self description size = 2.	self description add: self child3.	self assert: self description size = 3! !!MAContainerTest methodsFor: 'tests-validating' stamp: 'lr 11/6/2009 15:10'!testTwoFailingValidation	| example |	self description		add: (self child1			addCondition: [ :v | false ];			beRequired;			yourself);		add: (self child2			addCondition: [ :v | false ];			beRequired;			yourself).	example := self exampleInstance.	self		should: [ example validate ]		raise: MAValidationError.	[ example validate ]		on: MAValidationError		do: [ :err |			self assert: err class = MAMultipleErrors.			self assert: err tag = self description.			self assert: err collection size = 2.			self assert: err collection first tag = self child1.			self assert: err collection last tag = self child2 ]! !!MAContainerTest methodsFor: 'tests-operators' stamp: 'lr 3/9/2006 11:34'!testUnion	| a b union |	a := self child1 , self child2.	b := self child2 , self child3.	union := a union: b.	self assert: (union size) = 3.	self assert: (union includes: self child1).	self assert: (union includes: self child2).	self assert: (union includes: self child3)! !!MAContainerTest methodsFor: 'tests-enumerating' stamp: 'lr 3/9/2006 11:34'!testWithDo	self description add: self child1; add: self child2.	self description with: self description children		do: [ :first :second | self assert: first = second ]! !MAContainerTest subclass: #MAPriorityContainerTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Magritte-Tests-Model-Description'!!MAPriorityContainerTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!isAbstract	^ false! !!MAPriorityContainerTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:35'!actualClass	^ MAPriorityContainer! !!MAPriorityContainerTest methodsFor: 'tests-moving' stamp: 'lr 3/9/2006 11:35'!testMoveDown	self should: [ super testMoveDown ] raise: Error! !!MAPriorityContainerTest methodsFor: 'tests-moving' stamp: 'lr 3/9/2006 11:35'!testMoveUp	self should: [ super testMoveUp ] raise: Error! !!MADescriptionTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!isAbstract	^ true! !!MADescriptionTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!shouldInheritSelectors	^ true! !!MADescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!actualClass	^ MADescription! !!MADescriptionTest methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:34'!description	^ description! !!MADescriptionTest methodsFor: 'private' stamp: 'lr 2/16/2007 09:36'!descriptionInstance	^ self actualClass new		accessor: MANullAccessor new;		yourself! !!MADescriptionTest methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:34'!instance	^ description! !!MADescriptionTest methodsFor: 'running' stamp: 'lr 4/18/2007 19:05'!setUp	super setUp.	description := self descriptionInstance.	self assert: description accessor notNil! !!MADescriptionTest methodsFor: 'tests-accessing' stamp: 'lr 3/9/2006 11:34'!testAccessor	self description accessor: (MASelectorAccessor selector: #foo).	self assert: self description accessor selector = #foo! !!MADescriptionTest methodsFor: 'tests-converting' stamp: 'lr 3/9/2006 11:34'!testAsContainer	self subclassResponsibility! !!MADescriptionTest methodsFor: 'tests-accessing' stamp: 'lr 3/9/2006 11:34'!testComment	self description comment: 'bar'.	self assert: self description comment = 'bar'! !!MADescriptionTest methodsFor: 'tests-copying' stamp: 'lr 3/9/2006 11:34'!testCopyAccessor	self assert: self description copy accessor = self description accessor.	self deny: self description copy accessor == self description accessor! !!MADescriptionTest methodsFor: 'tests-identity' stamp: 'lr 3/9/2006 11:34'!testDictionaryKey	| dictionary |	dictionary := Dictionary new.	dictionary at: self instance put: 1.	self assert: (dictionary at: self instance) = 1.	dictionary at: self instance put: 2.	self assert: (dictionary at: self instance) = 2! !!MADescriptionTest methodsFor: 'tests-accessing' stamp: 'lr 10/27/2007 12:21'!testGroup	self assert: self description group isNil.	self description group: 'foo'.	self assert: self description group = 'foo'! !!MADescriptionTest methodsFor: 'tests-testing' stamp: 'lr 3/9/2006 11:34'!testHasChildren	self deny: self description hasChildren! !!MADescriptionTest methodsFor: 'tests-testing' stamp: 'lr 3/9/2006 11:34'!testHasComment	self description comment: nil.	self deny: self description hasComment.	self description comment: ''.	self deny: self description hasComment.	self description comment: 'comment'.	self assert:  self description hasComment! !!MADescriptionTest methodsFor: 'tests-testing' stamp: 'lr 3/9/2006 11:34'!testHasLabel	self description label: nil.	self deny: self description hasLabel.	self description label: ''.	self deny: self description hasLabel.	self description label: 'label'.	self assert:  self description hasLabel! !!MADescriptionTest methodsFor: 'tests-testing' stamp: 'lr 3/9/2006 11:34'!testIsContainer	self deny: self description isContainer! !!MADescriptionTest methodsFor: 'tests-testing' stamp: 'lr 3/9/2006 11:34'!testIsDescription	self assert: self description isDescription! !!MADescriptionTest methodsFor: 'tests-testing' stamp: 'lr 3/30/2009 23:16'!testIsSortable	self assert: (self description isSortable or: [ self description isSortable not ])! !!MADescriptionTest methodsFor: 'tests-accessing' stamp: 'lr 3/9/2006 11:34'!testLabel	self description label: 'foo'.	self assert: self description label = 'foo'! !!MADescriptionTest methodsFor: 'tests-accessing' stamp: 'lr 3/9/2006 11:34'!testPriority	self description priority: 123.	self assert: self description priority = 123! !!MADescriptionTest methodsFor: 'tests-actions' stamp: 'lr 3/9/2006 11:34'!testReadonly	self description beReadonly.	self assert: self description readonly.	self assert: self description isReadonly.	self description beWriteable.	self deny: self description readonly.	self deny: self description isReadonly! !!MADescriptionTest methodsFor: 'tests-actions' stamp: 'lr 3/9/2006 11:34'!testRequired	self description beRequired.	self assert: self description required.	self assert: self description isRequired.	self description beOptional.	self deny: self description required.	self deny: self description isRequired! !!MADescriptionTest methodsFor: 'tests-identity' stamp: 'lr 3/9/2006 11:34'!testSetElement	| set |	set := Set new.	set add: self instance.	self assert: set size = 1.	self assert: (set includes: self instance).	set add: self instance.	self assert: set size = 1.	self assert: (set includes: self instance)! !!MADescriptionTest methodsFor: 'tests-actions' stamp: 'lr 3/9/2006 11:34'!testVisible	self description beHidden.	self deny: self description visible.	self deny: self description isVisible.	self description beVisible.	self assert: self description visible.	self assert: self description isVisible! !MADescriptionTest subclass: #MAElementDescriptionTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Magritte-Tests-Model-Description'!MAElementDescriptionTest subclass: #MABooleanDescriptionTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Magritte-Tests-Model-Description'!!MABooleanDescriptionTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!isAbstract	^ false! !!MABooleanDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!actualClass	^ MABooleanDescription! !!MABooleanDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!includedInstance	^ true! !!MABooleanDescriptionTest methodsFor: 'tests' stamp: 'lr 3/30/2009 23:12'!testFalseString	self description falseString: 'nein'.	self assert: (self description labelForOption: false) = 'nein'! !!MABooleanDescriptionTest methodsFor: 'tests' stamp: 'lr 3/30/2009 23:12'!testLabelForOption	self assert: (self description labelForOption: true) = 'true'.	self assert: (self description labelForOption: false) = 'false'.	self assert: (self description labelForOption: nil) = ''! !!MABooleanDescriptionTest methodsFor: 'tests' stamp: 'lr 3/30/2009 23:13'!testOptions	self assert: (self description options) = #(false true).	self assert: (self description allOptionsWith: Object new) = #(false true)! !!MABooleanDescriptionTest methodsFor: 'tests' stamp: 'lr 3/30/2009 23:11'!testTrueString	self description trueString: 'ja'.	self assert: (self description labelForOption: true) = 'ja'! !!MABooleanDescriptionTest methodsFor: 'tests-validation' stamp: 'lr 2/16/2007 09:47'!testValidateConditions! !MAElementDescriptionTest subclass: #MAClassDescriptionTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Magritte-Tests-Model-Description'!!MAClassDescriptionTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!isAbstract	^ false! !!MAClassDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!actualClass	^ MAClassDescription! !!MAClassDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!includedInstance	^ String! !!MAClassDescriptionTest methodsFor: 'private' stamp: 'jf 10/5/2009 08:30'!nonIdenticalInstance	"Classes cannot be copied on some platforms, so we override the inherited	behaviour in order to return a different class."		^ Object! !!MAClassDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!shouldSkipStringTests	^ true! !MAElementDescriptionTest subclass: #MAColorDescriptionTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Magritte-Tests-Model-Description'!!MAColorDescriptionTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!isAbstract	^ false! !!MAColorDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!actualClass	^ MAColorDescription! !!MAColorDescriptionTest methodsFor: 'private' stamp: 'jf 9/30/2009 00:19'!includedInstance	^ GRPlatform current magritteColorClass blue! !!MAElementDescriptionTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!isAbstract	^ true! !!MAElementDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!actualClass	^ MAElementDescription! !!MAElementDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!emptyInstance	^ String new! !!MAElementDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!includedInstance	self subclassResponsibility! !!MAElementDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!includedInstanceString	^ MAStringWriter write: self includedInstance description: self descriptionInstance! !!MAElementDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!invalidInstance	^ Object new! !!MAElementDescriptionTest methodsFor: 'private' stamp: 'jf 9/30/2009 01:10'!invalidInstanceString	^ self invalidInstance greaseString! !!MAElementDescriptionTest methodsFor: 'private' stamp: 'jf 10/5/2009 08:29'!nonIdenticalInstance	^ self includedInstance copy! !!MAElementDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!nullInstance	^ nil! !!MAElementDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!shouldSkipStringTests	^ false! !!MAElementDescriptionTest methodsFor: 'tests-validation' stamp: 'lr 10/8/2007 16:02'!testAddCondition	self description		addCondition: [ :value | value isNil ].	self assert: self description conditions size = 1.	self assert: self description conditions first value isString! !!MAElementDescriptionTest methodsFor: 'tests-validation' stamp: 'lr 10/8/2007 16:02'!testAddConditionLabelled	self description		addCondition: [ :value | value isNil ]		labelled: 'ist net nil'.	self assert: self description conditions size = 1.	self assert: self description conditions first value = 'ist net nil'! !!MAElementDescriptionTest methodsFor: 'tests-converting' stamp: 'lr 3/9/2006 11:34'!testAsContainer	self assert: (self description asContainer size) = 1.	self assert: (self description asContainer includes: self description)! !!MAElementDescriptionTest methodsFor: 'tests-operators' stamp: 'lr 3/9/2006 11:34'!testConcatenation	| child1 child2 concatenate |	child1 := self description copy.	child2 := self description copy.	concatenate := child1 , child2.	self assert: concatenate size = 2.	self assert: concatenate children first = child1.	self assert: concatenate children second = child2.	concatenate := child1 , concatenate.	self assert: concatenate size = 3.	self assert: concatenate children first = child1.	self assert: concatenate children second = child1.	self assert: concatenate children third = child2! !!MAElementDescriptionTest methodsFor: 'tests-copying' stamp: 'lr 3/9/2006 11:34'!testCopy	super testCopy.	self assert: self description copy default = self description default! !!MAElementDescriptionTest methodsFor: 'tests-accessing' stamp: 'lr 11/2/2007 14:02'!testDefault	self description default: self includedInstance.	self assert: self description default = self includedInstance! !!MAElementDescriptionTest methodsFor: 'tests-strings' stamp: 'lr 5/21/2009 13:35'!testFromString	self shouldSkipStringTests ifTrue: [ ^ self ].	self assert: (self description		fromString: self includedInstanceString)			= self includedInstance.	self assert: (self description		fromString: self includedInstanceString		reader: self description stringReader)			= self includedInstance.	self assert: (self description		fromString: self includedInstanceString		reader: self description stringReader new)			= self includedInstance! !!MAElementDescriptionTest methodsFor: 'tests-strings' stamp: 'lr 3/9/2006 11:34'!testFromStringCollection	self shouldSkipStringTests ifTrue: [ ^ self ].	self assert: (self description		fromStringCollection: (Array			with: self includedInstanceString			with: self includedInstanceString))				= (Array					with: self includedInstance					with: self includedInstance).	self assert: (self description		fromStringCollection: (Array			with: self includedInstanceString			with: self includedInstanceString)		reader: self description stringReader)				= (Array					with: self includedInstance					with: self includedInstance)! !!MAElementDescriptionTest methodsFor: 'tests-strings' stamp: 'lr 1/30/2008 09:45'!testFromStringEvaluated	"This ensures that the parsing algorithm doesn't compile the input, what would cause a  security hole in the framework."	| error |	error := nil.	self shouldSkipStringTests ifTrue: [ ^ self ].	[ self description fromString: '1 / 0. nil' ]		on: Exception 		do: [ :err | error := err ].	self deny: (error isKindOf: ZeroDivide)! !!MAElementDescriptionTest methodsFor: 'tests-strings' stamp: 'lr 11/2/2007 14:12'!testFromStringInvalid	self shouldSkipStringTests ifTrue: [ ^ self ].	self		should: [ self description fromString: self invalidInstanceString ]		raise: MAReadError! !!MAElementDescriptionTest methodsFor: 'tests-strings' stamp: 'lr 3/9/2006 11:34'!testFromStringNull	self shouldSkipStringTests ifTrue: [ ^ self ].	self assert: (self description		fromString: self emptyInstance) isNil.	self assert: (self description		fromString: self emptyInstance		reader: self description stringReader) isNil.	self assert: (self description		fromString: self emptyInstance		reader: self description stringReader new) isNil! !!MAElementDescriptionTest methodsFor: 'tests-accessing' stamp: 'lr 3/9/2006 11:34'!testKind	self assert: (self includedInstance isKindOf: self description kind)! !!MAElementDescriptionTest methodsFor: 'tests-validation' stamp: 'lr 2/12/2007 19:06'!testKindErrorMessage	self assert: self description kindErrorMessage notEmpty.	self description kindErrorMessage: 'zork'.	self assert: self description kindErrorMessage = 'zork'.	[ self description validateKind: self invalidInstance ]		on: MAKindError		do: [ :err | self assert: self description kindErrorMessage = err messageText ]! !!MAElementDescriptionTest methodsFor: 'tests-validation' stamp: 'lr 2/12/2007 19:06'!testRequiredErrorMessage	self assert: self description requiredErrorMessage notEmpty.	self description requiredErrorMessage: 'zork'.	self assert: self description requiredErrorMessage = 'zork'.	[ self description beRequired; validateRequired: self nullInstance ]		on: MARequiredError		do: [ :err | self assert: self description requiredErrorMessage = err messageText ]! !!MAElementDescriptionTest methodsFor: 'tests-testing' stamp: 'lr 2/16/2007 09:31'!testSatisfied	self assert: (self description isSatisfiedBy: self includedInstance).	self assert: (self description isSatisfiedBy: self nullInstance).	self deny: (self description isSatisfiedBy: self invalidInstance)! !!MAElementDescriptionTest methodsFor: 'tests-accessing' stamp: 'lr 3/9/2006 11:34'!testStringReader	| object |	self description stringReader: (object := MAStringReader new).	self assert: self description stringReader = object! !!MAElementDescriptionTest methodsFor: 'tests-accessing' stamp: 'lr 3/9/2006 11:34'!testStringWriter	| object |	self description stringWriter: (object := MAStringWriter new).	self assert: self description stringWriter = object! !!MAElementDescriptionTest methodsFor: 'tests-strings' stamp: 'lr 3/9/2006 11:34'!testToString	self shouldSkipStringTests ifTrue: [ ^ self ].	self assert: (self description		toString: self includedInstance)			= self includedInstanceString.	self assert: (self description		toString: self includedInstance		writer: self description stringWriter)			= self includedInstanceString.	self assert: (self description		toString: self includedInstance		writer: self description stringWriter new)			= self includedInstanceString! !!MAElementDescriptionTest methodsFor: 'tests-strings' stamp: 'lr 3/9/2006 11:34'!testToStringCollection	self shouldSkipStringTests ifTrue: [ ^ self ].	self assert: (self description		toStringCollection: (Array			with: self includedInstance			with: self includedInstance))				= (Array					with: self includedInstanceString					with: self includedInstanceString).	self assert: (self description		toStringCollection: (Array			with: self includedInstance			with: self includedInstance)		writer: self description stringWriter)			= (Array				with: self includedInstanceString				with: self includedInstanceString)! !!MAElementDescriptionTest methodsFor: 'tests-strings' stamp: 'lr 3/9/2006 11:34'!testToStringFromString	self shouldSkipStringTests ifTrue: [ ^ self ].	self assert: (self description		fromString: (self description			toString: self includedInstance))				= self includedInstance.	self assert: (self description		fromString: (self description			toString: self includedInstance			writer: self description stringWriter)		reader: self description stringReader)				= self includedInstance.	self assert: (self description		fromString: (self description			toString: self includedInstance			writer: self description stringWriter new)		reader: self description stringReader new)				= self includedInstance! !!MAElementDescriptionTest methodsFor: 'tests-strings' stamp: 'lr 5/21/2009 13:25'!testToStringNull	self shouldSkipStringTests ifTrue: [ ^ self ].	self assert: (self description		toString: self nullInstance)			= self description undefined.	self assert: (self description		toString: self nullInstance		writer: self description stringWriter)			= self description undefined.	self assert: (self description		toString: self nullInstance		writer: self description stringWriter new)			= self description undefined! !!MAElementDescriptionTest methodsFor: 'tests-strings' stamp: 'lr 3/9/2006 11:34'!testToStringUndefined	self shouldSkipStringTests ifTrue: [ ^ self ].	self description undefined: 'n/a'.	self assert: (self description		toString: self nullInstance)			= 'n/a'.	self assert: (self description		toString: self nullInstance		writer: self description stringWriter)			= 'n/a'.	self assert: (self description		toString: self nullInstance		writer: self description stringWriter new)			= 'n/a'! !!MAElementDescriptionTest methodsFor: 'tests-accessing' stamp: 'lr 3/9/2006 11:34'!testUndefined	self description undefined: 'nop'.	self assert: self description undefined = 'nop'! !!MAElementDescriptionTest methodsFor: 'tests-validation' stamp: 'lr 3/9/2006 11:34'!testValidate	self description beRequired.	self		shouldnt: [ self description validate: self includedInstance ]		raise: MAValidationError.	self		should: [ self description validate: self invalidInstance ]		raise: MAKindError.	self		should: [ self description validate: self nullInstance ]		raise: MARequiredError! !!MAElementDescriptionTest methodsFor: 'tests-validation' stamp: 'jf 10/5/2009 08:29'!testValidateConditions	"This test might fail for MADateDescriptionTest, since there is a bug in Squeak."	| object |	object := self includedInstance.	self description		addCondition: [ :value | object == value ]		labelled: 'included instance test'.	self		shouldnt: [ self description validate: object ]		raise: MAConditionError.	self		should: [ self description validate: self nonIdenticalInstance ]		raise: MAConditionError! !!MAElementDescriptionTest methodsFor: 'tests-validation' stamp: 'lr 3/9/2006 11:34'!testValidateKind	self		should: [ self description validateKind: self invalidInstance ]		raise: MAKindError.	self		shouldnt: [ self description validateKind: self includedInstance ]		raise: MAKindError! !!MAElementDescriptionTest methodsFor: 'tests-validation' stamp: 'lr 3/9/2006 11:34'!testValidateRequired	self description beOptional.	self		shouldnt: [ self description validateRequired: self nullInstance ]		raise: MARequiredError.	self		shouldnt: [ self description validateRequired: self includedInstance ]		raise: MARequiredError.	self description beRequired.	self		should: [ self description validateRequired: self nullInstance ]		raise: MARequiredError.	self		shouldnt: [ self description validateRequired: self includedInstance ]		raise: MARequiredError! !!MAElementDescriptionTest methodsFor: 'tests-validation' stamp: 'lr 2/16/2007 09:21'!testValidateSpecific	self		shouldnt: [ self description validate: self includedInstance ]		raise: MARequiredError! !MAElementDescriptionTest subclass: #MAFileDescriptionTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Magritte-Tests-Model-Description'!!MAFileDescriptionTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!isAbstract	^ false! !!MAFileDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!actualClass	^ MAFileDescription! !!MAFileDescriptionTest methodsFor: 'private' stamp: 'lr 10/18/2007 18:21'!includedInstance	^ MAMemoryFileModel new		contents: 'Lukas Renggli';		filename: 'author.txt';		yourself! !!MAFileDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!shouldSkipStringTests	^ true! !!MAFileDescriptionTest methodsFor: 'tests-accessing' stamp: 'jf 9/15/2009 15:39'!testKind	super testKind.	self description kind: MAFileModelStub.	self assert: self description kind = MAFileModelStub! !MAElementDescriptionTest subclass: #MAMagnitudeDescriptionTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Magritte-Tests-Model-Description'!MAMagnitudeDescriptionTest subclass: #MADateAndTimeDescriptionTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Magritte-Tests-Model-Description'!!MADateAndTimeDescriptionTest class methodsFor: 'testing' stamp: 'pmm 8/31/2009 20:10'!isAbstract	^ false! !!MADateAndTimeDescriptionTest methodsFor: 'private' stamp: 'pmm 8/31/2009 20:11'!actualClass	^ MADateAndTimeDescription! !!MADateAndTimeDescriptionTest methodsFor: 'private' stamp: 'pmm 8/31/2009 20:11'!excludedInstance	^ DateAndTime year: 1980 month: 1 day: 11 hour: 11 minute: 38 second: 12! !!MADateAndTimeDescriptionTest methodsFor: 'private' stamp: 'pmm 8/31/2009 20:11'!includedInstance	^ DateAndTime year: 1980 month: 6 day: 11 hour: 11 minute: 38 second: 12! !!MADateAndTimeDescriptionTest methodsFor: 'private' stamp: 'pmm 8/31/2009 20:11'!maxInstance	^ DateAndTime year: 1980 month: 6 day: 12 hour: 11 minute: 38 second: 12! !!MADateAndTimeDescriptionTest methodsFor: 'private' stamp: 'pmm 8/31/2009 20:11'!minInstance	^ DateAndTime year: 1980 month: 6 day: 10 hour: 11 minute: 38 second: 12! !MAMagnitudeDescriptionTest subclass: #MADateDescriptionTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Magritte-Tests-Model-Description'!!MADateDescriptionTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!isAbstract	^ false! !!MADateDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!actualClass	^ MADateDescription! !!MADateDescriptionTest methodsFor: 'private' stamp: 'dkh 11/01/2007 17:41'!excludedInstance	^ Date newDay: 1 month: (Date nameOfMonth: 6) year: 1980! !!MADateDescriptionTest methodsFor: 'private' stamp: 'lr 1/18/2008 19:16'!includedInstance	^ Date newDay: 11 month: (Date nameOfMonth: 6) year: 1980! !!MADateDescriptionTest methodsFor: 'private' stamp: 'dkh 11/01/2007 17:42'!maxInstance	^ Date newDay: 12 month: (Date nameOfMonth: 6) year: 1980! !!MADateDescriptionTest methodsFor: 'private' stamp: 'dkh 11/01/2007 17:42'!minInstance	^ Date newDay: 10 month: (Date nameOfMonth: 6) year: 1980! !MAMagnitudeDescriptionTest subclass: #MADurationDescriptionTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Magritte-Tests-Model-Description'!!MADurationDescriptionTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!isAbstract	^ false! !!MADurationDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!actualClass	^ MADurationDescription! !!MADurationDescriptionTest methodsFor: 'private' stamp: 'lr 11/14/2006 18:16'!excludedInstance	^ Duration days: 0 hours: 0 minutes: 0 seconds: 2! !!MADurationDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!includedInstance	^ Duration days: 1 hours: 2 minutes: 3 seconds: 4! !!MADurationDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!maxInstance	^ Duration days: 2 hours: 2 minutes: 3 seconds: 4! !!MADurationDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!minInstance	^ Duration days: 0 hours: 2 minutes: 3 seconds: 4! !!MAMagnitudeDescriptionTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!isAbstract	^ true! !!MAMagnitudeDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!actualClass	^ MAMagnitudeDescription! !!MAMagnitudeDescriptionTest methodsFor: 'private' stamp: 'lr 11/14/2006 18:15'!excludedInstance	self subclassResponsibility! !!MAMagnitudeDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!maxInstance	self subclassResponsibility! !!MAMagnitudeDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!minInstance	self subclassResponsibility! !!MAMagnitudeDescriptionTest methodsFor: 'tests' stamp: 'lr 3/21/2006 20:01'!testInfToInf	self assert: self description min isNil.	self assert: self description max isNil.	self assert: (self description isSatisfiedBy: self minInstance).	self assert: (self description isSatisfiedBy: self includedInstance).	self assert: (self description isSatisfiedBy: self maxInstance)! !!MAMagnitudeDescriptionTest methodsFor: 'tests' stamp: 'lr 3/21/2006 20:01'!testInfToVal	self description max: self includedInstance.	self assert: self description min isNil.	self assert: self description max = self includedInstance.	self assert: (self description isSatisfiedBy: self minInstance).	self assert: (self description isSatisfiedBy: self includedInstance).	self deny: (self description isSatisfiedBy: self maxInstance)! !!MAMagnitudeDescriptionTest methodsFor: 'tests-accessing' stamp: 'lr 3/9/2006 11:34'!testMax	self description max: self maxInstance.	self assert: self description max = self maxInstance! !!MAMagnitudeDescriptionTest methodsFor: 'tests-accessing' stamp: 'lr 3/9/2006 11:34'!testMin	self description min: self minInstance.	self assert: self description min = self minInstance! !!MAMagnitudeDescriptionTest methodsFor: 'tests-accessing' stamp: 'lr 3/9/2006 11:34'!testMinMax	self description min: self minInstance max: self maxInstance.	self assert: self description min = self minInstance.	self assert: self description max = self maxInstance! !!MAMagnitudeDescriptionTest methodsFor: 'tests-validation' stamp: 'lr 7/25/2008 17:39'!testRangeErrorMessage	self description		min: self minInstance;		max: self maxInstance.	self assert: self description rangeErrorMessage notEmpty.	self description rangeErrorMessage: 'zork'.	self assert: self description rangeErrorMessage = 'zork'.	[ self description validate: self excludedInstance ]		on: MARangeError		do: [ :err | self assert: self description rangeErrorMessage = err messageText ]! !!MAMagnitudeDescriptionTest methodsFor: 'tests-validation' stamp: 'lr 7/25/2008 17:47'!testRangeErrorMessageGenerated	self description min: nil max: nil.	self assert: self description rangeErrorMessage isNil.		self description min: nil max: self maxInstance.	self assert: self description rangeErrorMessage notEmpty.		self description min: self minInstance max: nil.	self assert: self description rangeErrorMessage notEmpty.	self description min: self minInstance max: self maxInstance.	self assert: self description rangeErrorMessage notEmpty! !!MAMagnitudeDescriptionTest methodsFor: 'tests' stamp: 'lr 3/21/2006 20:01'!testValToInf	self description min: self includedInstance.	self assert: self description min = self includedInstance.	self assert: self description max isNil.	self deny: (self description isSatisfiedBy: self minInstance).	self assert: (self description isSatisfiedBy: self includedInstance).	self assert: (self description isSatisfiedBy: self maxInstance)! !!MAMagnitudeDescriptionTest methodsFor: 'tests' stamp: 'lr 3/21/2006 20:01'!testValToVal	self description min: self includedInstance.	self description max: self includedInstance.	self assert: self description min = self includedInstance.	self assert: self description max = self includedInstance.	self deny: (self description isSatisfiedBy: self minInstance).	self assert: (self description isSatisfiedBy: self includedInstance).	self deny: (self description isSatisfiedBy: self maxInstance)! !!MAMagnitudeDescriptionTest methodsFor: 'tests-validation' stamp: 'lr 2/16/2007 09:21'!testValidateSpecific	super testValidateSpecific.	self description		min: self minInstance;		max: self maxInstance.	self		shouldnt: [ self description validate: self includedInstance ]		raise: MARangeError.	self		should: [ self description validate: self excludedInstance ]		raise: MARangeError! !MAMagnitudeDescriptionTest subclass: #MANumberDescriptionTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Magritte-Tests-Model-Description'!!MANumberDescriptionTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!isAbstract	^ false! !!MANumberDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!actualClass	^ MANumberDescription! !!MANumberDescriptionTest methodsFor: 'private' stamp: 'lr 11/14/2006 18:16'!excludedInstance	^ 0.6180! !!MANumberDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!includedInstance	^ 2.7182! !!MANumberDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!maxInstance	^ 3.1415! !!MANumberDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!minInstance	^ 1.6180! !!MANumberDescriptionTest methodsFor: 'tests' stamp: 'lr 3/30/2009 23:18'!testBeInteger	self description beInteger.	self assert: (self description isSatisfiedBy: 1).	self assert: (self description isSatisfiedBy: -1).	self deny: (self description isSatisfiedBy: 1 / 2).	self deny: (self description isSatisfiedBy: 1.2)! !!MANumberDescriptionTest methodsFor: 'tests' stamp: 'lr 3/30/2009 23:18'!testBeNegative	self description beNegative.	self assert: (self description isSatisfiedBy: -1).	self assert: (self description isSatisfiedBy: -1.5).	self deny: (self description isSatisfiedBy: 1).	self deny: (self description isSatisfiedBy: 1.5)! !!MANumberDescriptionTest methodsFor: 'tests' stamp: 'lr 3/30/2009 23:19'!testBePositive	self description bePositive.	self assert: (self description isSatisfiedBy: 1).	self assert: (self description isSatisfiedBy: 1.5).	self deny: (self description isSatisfiedBy: -0.1).	self deny: (self description isSatisfiedBy: -1)! !!MANumberDescriptionTest methodsFor: 'private' stamp: 'MatthiasBerth 3/25/2007 13:58'!testFromString	"We do some special tests here because #visitNumberDescription: in	MAStringReader works around problems with Number>>readFrom."	self shouldSkipStringTests		ifTrue: [^ self].	super testFromString.	self		should: [self description fromString: 'xyz']		raise: MAReadError		description: 'Non-numeric string should raise an error'.	self		should: [self description fromString: '12-234']		raise: MAReadError		description: 'Non-numeric string should raise an error'.	self		should: [self description fromString: '1.4.2007']		raise: MAReadError		description: 'Non-numeric string should raise an error'.	self assert: (self description fromString: '') isNil description: 'Empty string should be parsed to nil'.	self assert: (self description fromString: '-20')			= -20 description: 'Negative numbers should be accepted'! !!MANumberDescriptionTest methodsFor: 'tests' stamp: 'lr 8/2/2008 17:54'!testValidateConditions! !MAMagnitudeDescriptionTest subclass: #MATimeDescriptionTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Magritte-Tests-Model-Description'!!MATimeDescriptionTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!isAbstract	^ false! !!MATimeDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:35'!actualClass	^ MATimeDescription! !!MATimeDescriptionTest methodsFor: 'private' stamp: 'lr 11/14/2006 18:16'!excludedInstance	^ Time hour: 9 minute: 33 second: 12! !!MATimeDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:35'!includedInstance	^ Time hour: 11 minute: 33 second: 12! !!MATimeDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:35'!maxInstance	^ Time hour: 12 minute: 33 second: 12! !!MATimeDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:35'!minInstance	^ Time hour: 10 minute: 33 second: 12! !MAMagnitudeDescriptionTest subclass: #MATimeStampDescriptionTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Magritte-Tests-Model-Description'!!MATimeStampDescriptionTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!isAbstract	^ false! !!MATimeStampDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:35'!actualClass	^ MATimeStampDescription! !!MATimeStampDescriptionTest methodsFor: 'private' stamp: 'jf 9/30/2009 00:19'!excludedInstance	^ GRPlatform current magritteTimeStampClass 		year: 1980		month: 1		day: 11		hour: 11		minute: 38		second: 12! !!MATimeStampDescriptionTest methodsFor: 'private' stamp: 'jf 9/30/2009 00:19'!includedInstance	^ GRPlatform current magritteTimeStampClass 		year: 1980		month: 6		day: 11		hour: 11		minute: 38		second: 12! !!MATimeStampDescriptionTest methodsFor: 'private' stamp: 'jf 9/30/2009 00:19'!maxInstance	^ GRPlatform current magritteTimeStampClass 		year: 1980		month: 6		day: 12		hour: 11		minute: 38		second: 12! !!MATimeStampDescriptionTest methodsFor: 'private' stamp: 'jf 9/30/2009 00:19'!minInstance	^ GRPlatform current magritteTimeStampClass 		year: 1980		month: 6		day: 10		hour: 11		minute: 38		second: 12! !MAElementDescriptionTest subclass: #MAReferenceDescriptionTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Magritte-Tests-Model-Description'!MAReferenceDescriptionTest subclass: #MAOptionDescriptionTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Magritte-Tests-Model-Description'!MAOptionDescriptionTest subclass: #MAMultipleOptionDescriptionTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Magritte-Tests-Model-Description'!!MAMultipleOptionDescriptionTest class methodsFor: 'accessing-default' stamp: 'lr 3/9/2006 11:35'!defaultUnique	^ false! !!MAMultipleOptionDescriptionTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!isAbstract	^ false! !!MAMultipleOptionDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!actualClass	^ MAMultipleOptionDescription! !!MAMultipleOptionDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!includedInstance	^ self optionInstances copyFrom: 1 to: 2! !!MAMultipleOptionDescriptionTest methodsFor: 'tests-properties' stamp: 'lr 3/9/2006 11:34'!testOrdered	self description beOrdered.	self assert: self description isOrdered.	self assert: self description ordered.	self description beUnordered.	self deny: self description isOrdered.	self deny: self description ordered! !!MAMultipleOptionDescriptionTest methodsFor: 'tests-properties' stamp: 'lr 3/9/2006 11:34'!testSorted	self description beDistinct.	self assert: self description isDistinct.	self assert: self description distinct.	self description beIndefinite.	self deny: self description isDistinct.	self deny: self description distinct! !!MAOptionDescriptionTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!isAbstract	^ true! !!MAOptionDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:35'!actualClass	^ MAOptionDescription! !!MAOptionDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!optionInstances	^ Array with: 'foo' with: 'bar' with: 'zork'! !!MAOptionDescriptionTest methodsFor: 'running' stamp: 'lr 3/9/2006 11:34'!setUp	super setUp.	self description options: self optionInstances! !!MAOptionDescriptionTest methodsFor: 'tests-accessing' stamp: 'lr 3/9/2006 11:35'!testAllOptions	self description beRequired; beSorted; options: #( c b a ).	self assert: self description allOptions = #( a b c ).	self description beRequired; beUnsorted; options: #( c b a ).	self assert: self description allOptions = #( c b a )! !!MAOptionDescriptionTest methodsFor: 'tests-accessing' stamp: 'lr 3/9/2006 11:34'!testAllOptionsWithExisting	self description beRequired; options: #( a b c ).	self assert: (self description allOptionsWith: #a) = #( a b c )! !!MAOptionDescriptionTest methodsFor: 'tests-accessing' stamp: 'lr 3/9/2006 11:34'!testAllOptionsWithNil	self description beRequired; options: #( a b c ).	self assert: (self description allOptionsWith: nil) = #( a b c )! !!MAOptionDescriptionTest methodsFor: 'tests-copying' stamp: 'lr 3/9/2006 11:34'!testCopyOptions	self deny: self description copy options == self description options.	self assert: self description copy options = self description options! !!MAOptionDescriptionTest methodsFor: 'tests-strings' stamp: 'lr 3/24/2007 21:51'!testFromStringInvalid	"There is no invalid string input."! !!MAOptionDescriptionTest methodsFor: 'tests-accessing' stamp: 'lr 3/9/2006 11:34'!testOptions	self description options: #( a b c ).	self assert: self description options = #( a b c )! !!MAOptionDescriptionTest methodsFor: 'tests-strings' stamp: 'lr 9/12/2007 17:27'!testOptionsAndLabels	self description reference: MANumberDescription new.	self assert: (self description labelForOption: 1) = '1'.	self description optionsAndLabels: (Array with: 1 -> 'one' with: 2 -> 'two').	self assert: (self description labelForOption: 1) = 'one'.	self assert: (self description labelForOption: 2) = 'two'.	self assert: (self description labelForOption: 3) = '3'! !!MAOptionDescriptionTest methodsFor: 'tests-accessing' stamp: 'lr 3/30/2009 23:20'!testOptionsTextual	self description optionsTextual: 'a' , (String with: Character cr) , 'b'.	self assert: self description optionsTextual = ('a' , (String with: Character cr) , 'b').	self assert: self description options = #( 'a' 'b' )! !!MAOptionDescriptionTest methodsFor: 'tests' stamp: 'jf 10/16/2009 11:31'!testReferencePrinting	| label |	self description reference: MAStringDescription new.	self assert: (self description labelForOption: 1) = '1'.	label := self description labelForOption: 1 @ 2.	self assert: (label includesSubString: '1').	self assert: (label includesSubString: '2').	label := self description labelForOption: 1 -> 2.	self assert: (label includesSubString: '1').	self assert: (label includesSubString: '2').! !!MAOptionDescriptionTest methodsFor: 'tests-properties' stamp: 'lr 3/9/2006 11:35'!testSorted	self description beSorted.	self assert: self description isSorted.	self assert: self description sorted.	self description beUnsorted.	self deny: self description isSorted.	self deny: self description sorted! !MAOptionDescriptionTest subclass: #MASingleOptionDescriptionTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Magritte-Tests-Model-Description'!!MASingleOptionDescriptionTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!isAbstract	^ false! !!MASingleOptionDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:35'!actualClass	^ MASingleOptionDescription! !!MASingleOptionDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:35'!includedInstance	^ self optionInstances first! !!MASingleOptionDescriptionTest methodsFor: 'tests-accessing' stamp: 'lr 3/9/2006 11:35'!testAllOptionsOptional	self description beOptional; beSorted; options: #( c b a ).	self assert: self description allOptions = #( nil a b c ).	self description beOptional; beUnsorted; options: #( c b a ).	self assert: self description allOptions = #( nil c b a )! !!MASingleOptionDescriptionTest methodsFor: 'tests-accessing' stamp: 'lr 5/5/2006 19:37'!testAllOptionsWithExtensible	self description beRequired; beUnsorted; beLimited; options: #( c d a ).	self assert: (self description allOptionsWith: #b) = #( c d a ).	self description beRequired; beUnsorted; beExtensible; options: #( c d a ).	self assert: (self description allOptionsWith: #b) = #( c d a b ).	self description beRequired; beSorted; beLimited; options: #( c d a ).	self assert: (self description allOptionsWith: #b) = #( a c d ).	self description beRequired; beSorted; beExtensible; options: #( c d a ).	self assert: (self description allOptionsWith: #b) = #( a b c d )! !!MASingleOptionDescriptionTest methodsFor: 'tests-accessing' stamp: 'lr 5/5/2006 19:26'!testAllOptionsWithOptional	self description beOptional; beSorted; beExtensible; options: #( c d a ).	self assert: (self description allOptionsWith: #b) = #( nil a b c d ).	self description beOptional; beSorted; beLimited; options: #( c d a ).	self assert: (self description allOptionsWith: #b) = #( nil a c d ).	self description beOptional; beUnsorted; beExtensible; options: #( c d a ).	self assert: (self description allOptionsWith: #b) = #( nil c d a b ).	self description beOptional; beUnsorted; beLimited; options: #( c d a ).	self assert: (self description allOptionsWith: #b) = #( nil c d a )! !!MASingleOptionDescriptionTest methodsFor: 'tests-properties' stamp: 'lr 3/9/2006 11:35'!testExtensible	self description beExtensible.	self assert: self description isExtensible.	self assert: self description extensible.	self description beLimited.	self deny: self description isExtensible.	self deny: self description extensible! !!MASingleOptionDescriptionTest methodsFor: 'tests-properties' stamp: 'mb 4/10/2008 00:46'!testGroupBy	self deny: self description isGrouped.	self description groupBy: #grouping.	self assert: self description isGrouped.! !!MASingleOptionDescriptionTest methodsFor: 'tests-properties' stamp: 'mb 4/10/2008 01:21'!testGroupOf	self assert: MADateDescription grouping = 'Magnitude'.! !!MASingleOptionDescriptionTest methodsFor: 'tests' stamp: 'lr 5/21/2009 13:43'!testOptionsAndLabelsFromString	self description 		undefined: 'void';		optionsAndLabels: (Array with: 1 -> 'one' with: 2 -> 'two').	self assert: (self description fromString: 'void') isNil.	self assert: (self description fromString: 'one') = 1.	self assert: (self description fromString: 'two') = 2! !!MASingleOptionDescriptionTest methodsFor: 'tests' stamp: 'lr 5/21/2009 13:43'!testOptionsAndLabelsToString	self description 		undefined: 'void';		optionsAndLabels: (Array with: 1 -> 'one' with: 2 -> 'two').	self assert: (self description toString: nil) = 'void'.	self assert: (self description toString: 1) = 'one'.	self assert: (self description toString: 2) = 'two'.	self assert: (self description toString: 3) = '3'! !!MASingleOptionDescriptionTest methodsFor: 'tests-validation' stamp: 'lr 10/12/2010 13:03'!testValidationExtensible	self description beLimited.	self assert: (self description isSatisfiedBy: 'foo').	self deny: (self description isSatisfiedBy: 'zonk').	self deny: (self description isSatisfiedBy: 1).		self description beExtensible.	self assert: (self description isSatisfiedBy: 'foo').	self assert: (self description isSatisfiedBy: 'zonk').	self deny: (self description isSatisfiedBy: 1)! !!MAReferenceDescriptionTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!isAbstract	^ true! !!MAReferenceDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:35'!actualClass	^ MAReferenceDescription! !!MAReferenceDescriptionTest methodsFor: 'private' stamp: 'lr 4/18/2007 18:00'!referenceInstance	^ MAStringDescription new! !!MAReferenceDescriptionTest methodsFor: 'running' stamp: 'lr 4/18/2007 19:08'!setUp	super setUp.	self description reference: self referenceInstance.	self assert: self description reference accessor notNil! !!MAReferenceDescriptionTest methodsFor: 'tests-copying' stamp: 'lr 4/18/2007 19:05'!testCopyReference	self assert: self description copy reference = self description reference.	self deny: self description copy reference == self description reference! !MAReferenceDescriptionTest subclass: #MARelationDescriptionTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Magritte-Tests-Model-Description'!!MARelationDescriptionTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!isAbstract	^ true! !!MARelationDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:35'!actualClass	^ MARelationDescription! !!MARelationDescriptionTest methodsFor: 'private' stamp: 'lr 4/20/2007 14:30'!addressInstance1	^ MAMockAddress new		street: 'Tillierstrasse 17';		plz: 3005; place: 'Bern';		yourself! !!MARelationDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:35'!addressInstance2	^ MAMockAddress new		street: 'In der Au';		plz: 8765; place: 'Engi';		yourself! !!MARelationDescriptionTest methodsFor: 'running' stamp: 'lr 9/12/2007 17:27'!setUp	super setUp.	self description		reference: MAMockAddress description;		classes: (Array with: MAMockAddress)! !!MARelationDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:35'!shouldSkipStringTests	^ true! !!MARelationDescriptionTest methodsFor: 'tests-copying' stamp: 'lr 3/9/2006 11:35'!testCopyClasses	self assert: self description copy classes = self description classes.	self deny: self description copy classes == self description classes! !MARelationDescriptionTest subclass: #MAToManyRelationDescriptionTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Magritte-Tests-Model-Description'!!MAToManyRelationDescriptionTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!isAbstract	^ false! !!MAToManyRelationDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:35'!actualClass	^ MAToManyRelationDescription! !!MAToManyRelationDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:35'!includedInstance	^ Array with: self addressInstance1 with: self addressInstance2! !!MAToManyRelationDescriptionTest methodsFor: 'tests-properties' stamp: 'dc 4/18/2006 09:20'!testDefinitive	self description beDefinitive.	self assert: self description isDefinitive.	self assert: self description definitive.	self description beModifiable.	self deny: self description isDefinitive.	self deny: self description definitive! !!MAToManyRelationDescriptionTest methodsFor: 'tests-properties' stamp: 'dc 4/18/2006 09:17'!testOrdered	self description beOrdered.	self assert: self description isOrdered.	self assert: self description ordered.	self description beUnordered.	self deny: self description isOrdered.	self deny: self description ordered! !!MAToManyRelationDescriptionTest methodsFor: 'tests-properties' stamp: 'dc 4/18/2006 09:19'!testSorted	self description beSorted.	self assert: self description isSorted.	self assert: self description sorted.	self description beUnsorted.	self deny: self description isSorted.	self deny: self description sorted! !MAToManyRelationDescriptionTest subclass: #MAToManyScalarRelationDescriptionTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Magritte-Tests-Model-Description'!!MAToManyScalarRelationDescriptionTest methodsFor: 'private' stamp: 'pmm 11/3/2006 17:51'!actualClass	^ MAToManyScalarRelationDescription! !!MAToManyScalarRelationDescriptionTest methodsFor: 'private' stamp: 'pmm 11/3/2006 17:52'!includedInstance	^ Array with: '1' with: '2'! !!MAToManyScalarRelationDescriptionTest methodsFor: 'running' stamp: 'lr 9/12/2007 17:27'!setUp	super setUp.	self description		reference: (MAStringDescription new			accessor: MANullAccessor new;			yourself);		classes: (Array with: String)! !MARelationDescriptionTest subclass: #MAToOneRelationDescriptionTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Magritte-Tests-Model-Description'!!MAToOneRelationDescriptionTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!isAbstract	^ false! !!MAToOneRelationDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:35'!actualClass	^ MAToOneRelationDescription! !!MAToOneRelationDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:35'!includedInstance	^ self addressInstance1! !MAReferenceDescriptionTest subclass: #MATableDescriptionTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Magritte-Tests-Model-Description'!!MATableDescriptionTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!isAbstract	^ false! !!MATableDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:35'!actualClass	^ MATableDescription! !!MATableDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:35'!includedInstance	^ MATableModel rows: 3 columns: 3 contents: #( '1' '2' '3' '2' '4' '6' '3' '6' '9' )! !!MATableDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:35'!shouldSkipStringTests	^ true! !MAReferenceDescriptionTest subclass: #MATokenDescriptionTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Magritte-Tests-Model-Description'!!MATokenDescriptionTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!isAbstract	^ false! !!MATokenDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:35'!actualClass	^ MATokenDescription! !!MATokenDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:35'!includedInstance	^ #( 'foo' 'bar' )! !!MATokenDescriptionTest methodsFor: 'tests-strings' stamp: 'lr 3/24/2007 21:46'!testFromStringInvalid	"There is no invalid string input."! !MAElementDescriptionTest subclass: #MAStringDescriptionTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Magritte-Tests-Model-Description'!MAStringDescriptionTest subclass: #MAMemoDescriptionTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Magritte-Tests-Model-Description'!!MAMemoDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!actualClass	^ MAMemoDescription! !!MAMemoDescriptionTest methodsFor: 'tests-properties' stamp: 'lr 3/9/2006 11:34'!testLineCount	self description lineCount: 123.	self assert: self description lineCount = 123! !MAStringDescriptionTest subclass: #MAPasswordDescriptionTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Magritte-Tests-Model-Description'!!MAPasswordDescriptionTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!isAbstract	^ false! !!MAPasswordDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:35'!actualClass	^ MAPasswordDescription! !!MAPasswordDescriptionTest methodsFor: 'tests' stamp: 'lr 9/26/2007 18:31'!testIsObfuscated	self deny: (self description isObfuscated: '').	self deny: (self description isObfuscated: nil).	self deny: (self description isObfuscated: 123).	self deny: (self description isObfuscated: '**1').	self assert: (self description isObfuscated:  '******')! !!MAPasswordDescriptionTest methodsFor: 'tests' stamp: 'lr 9/26/2007 18:32'!testObfuscated	self assert: (self description obfuscated: nil) = ''.	self assert: (self description obfuscated: 'zork') = '****'.	self assert: (self description obfuscated: 'foobar') = '******'! !!MAStringDescriptionTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!isAbstract	^ false! !!MAStringDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:35'!actualClass	^ MAStringDescription! !!MAStringDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:35'!includedInstance	^ 'Lukas Renggli'! !!MAStringDescriptionTest methodsFor: 'tests-strings' stamp: 'lr 3/24/2007 21:51'!testFromStringInvalid	"There is no invalid string input."! !MAStringDescriptionTest subclass: #MASymbolDescriptionTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Magritte-Tests-Model-Description'!!MASymbolDescriptionTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!isAbstract	^ false! !!MASymbolDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:35'!actualClass	^ MASymbolDescription! !!MASymbolDescriptionTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:35'!includedInstance	^ #magritte! !!MASymbolDescriptionTest methodsFor: 'tests-validation' stamp: 'lr 2/16/2007 09:47'!testValidateConditions! !MAObjectTest subclass: #MAMementoTest	instanceVariableNames: 'description memento value'	classVariableNames: ''	poolDictionaries: ''	category: 'Magritte-Tests-Model-Memento'!MAMementoTest subclass: #MACachedMementoTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Magritte-Tests-Model-Memento'!!MACachedMementoTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!isAbstract	^ false! !!MACachedMementoTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!actualClass	^ MACachedMemento! !!MACachedMementoTest methodsFor: 'tests-accessing' stamp: 'lr 3/9/2006 11:34'!testCache	self assert: self memento cache size = self description size! !!MACachedMementoTest methodsFor: 'tests-actions' stamp: 'lr 3/9/2006 11:34'!testCommit	self write: self includedInstance.	self assert: self read = self includedInstance.	self assert: self value = self nullInstance.	self assert: self memento hasChanged.	self memento commit.	self assert: self read = self includedInstance.	self assert: self value = self includedInstance.	self deny: self memento hasChanged! !!MACachedMementoTest methodsFor: 'tests-basic' stamp: 'lr 3/9/2006 11:34'!testRead	self assert: self read = self defaultInstance.	self value: self includedInstance.	self assert: self read = self defaultInstance! !!MACachedMementoTest methodsFor: 'tests-actions' stamp: 'lr 3/9/2006 11:34'!testReset	self value: self defaultInstance.	self write: self includedInstance.	self assert: self memento hasChanged.	self memento reset.	self assert: self read = self defaultInstance.	self assert: self value = self defaultInstance.	self deny: self memento hasChanged! !!MACachedMementoTest methodsFor: 'tests-basic' stamp: 'lr 3/9/2006 11:34'!testWrite	self write: self includedInstance.	self assert: self read = self includedInstance.	self assert: self value = self nullInstance.	self write: self defaultInstance.	self assert: self read = self defaultInstance.	self assert: self value = self nullInstance! !MACachedMementoTest subclass: #MACheckedMementoTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Magritte-Tests-Model-Memento'!!MACheckedMementoTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!isAbstract	^ false! !!MACheckedMementoTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!actualClass	^ MACheckedMemento! !!MACheckedMementoTest methodsFor: 'tests-actions' stamp: 'lr 3/9/2006 11:34'!testConflictCommit	self write: self includedInstance.	self assert: self read = self includedInstance.	self assert: self memento hasChanged.	self deny: self memento hasConflict.	self value: self otherInstance.	self assert: self read = self includedInstance.	self assert: self memento hasChanged.	self assert: self memento hasConflict.	self memento commit.	self assert: self read = self includedInstance.	self assert: self value = self includedInstance.	self deny: self memento hasChanged.	self deny: self memento hasConflict! !!MACheckedMementoTest methodsFor: 'tests-actions' stamp: 'lr 3/9/2006 11:34'!testConflictReset	self write: self includedInstance.	self assert: self read = self includedInstance.	self assert: self memento hasChanged.	self deny: self memento hasConflict.	self value: self otherInstance.	self assert: self read = self includedInstance.	self assert: self memento hasChanged.	self assert: self memento hasConflict.	self memento reset.	self assert: self read = self otherInstance.	self assert: self value = self otherInstance.	self deny: self memento hasChanged.	self deny: self memento hasConflict! !!MACheckedMementoTest methodsFor: 'tests-accessing' stamp: 'lr 3/9/2006 11:34'!testOriginal	self assert: self memento original size = self description size! !!MACheckedMementoTest methodsFor: 'tests-actions' stamp: 'lr 3/9/2006 11:34'!testValidateConflictCommit	self write: self includedInstance.	self shouldnt: [ self memento validate ] raise: MAValidationError.	self value: self otherInstance.	self should: [ self memento validate ] raise: MAValidationError.	self memento commit.	self shouldnt: [ self memento validate ] raise: MAValidationError! !!MACheckedMementoTest methodsFor: 'tests-actions' stamp: 'lr 3/9/2006 11:34'!testValidateConflictReset	self write: self includedInstance.	self shouldnt: [ self memento validate ] raise: MAValidationError.	self value: self otherInstance.	self should: [ self memento validate ] raise: MAValidationError.	self memento reset.	self shouldnt: [ self memento validate ] raise: MAValidationError! !!MAMementoTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!isAbstract	^ true! !!MAMementoTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!actualClass	^ MAMemento! !!MAMementoTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!defaultInstance	^ 'Lukas Renggli'! !!MAMementoTest methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:34'!description	^ description! !!MAMementoTest methodsFor: 'private' stamp: 'lr 4/10/2008 14:17'!descriptionInstance	^ MAContainer with: (MAStringDescription new			default: self defaultInstance;			accessor: #value;			yourself)! !!MAMementoTest methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:34'!descriptionValue	^ self description children first! !!MAMementoTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!includedInstance	^ 'Rene Magritte'! !!MAMementoTest methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:34'!instance	^ memento! !!MAMementoTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!invalidInstance	^ 31415! !!MAMementoTest methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:34'!memento	^ memento! !!MAMementoTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!mementoInstance	^ self actualClass model: self modelInstance! !!MAMementoTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!modelInstance	^ self! !!MAMementoTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!nullInstance	^ nil! !!MAMementoTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!otherInstance	^ 'Ursula Freitag'! !!MAMementoTest methodsFor: 'accessing-memento' stamp: 'lr 3/9/2006 11:34'!read	^ self memento readUsing: self descriptionValue! !!MAMementoTest methodsFor: 'running' stamp: 'lr 3/9/2006 11:34'!setUp	super setUp.	description := self descriptionInstance.	memento := self mementoInstance! !!MAMementoTest methodsFor: 'tests-actions' stamp: 'lr 3/9/2006 11:34'!testCommit	self subclassResponsibility! !!MAMementoTest methodsFor: 'tests-accessing' stamp: 'lr 3/9/2006 11:34'!testDescription	self assert: self memento description = self description.	self assert: self memento description = self descriptionInstance! !!MAMementoTest methodsFor: 'tests-accessing' stamp: 'lr 3/9/2006 11:34'!testModel	self assert: self memento model = self modelInstance! !!MAMementoTest methodsFor: 'tests-basic' stamp: 'lr 3/9/2006 11:34'!testRead	self subclassResponsibility! !!MAMementoTest methodsFor: 'tests-actions' stamp: 'lr 3/9/2006 11:34'!testReset	self subclassResponsibility! !!MAMementoTest methodsFor: 'tests-actions' stamp: 'lr 3/9/2006 11:34'!testValidateIncluded	self write: self includedInstance.	self shouldnt: [ self memento validate ] raise: MAValidationError! !!MAMementoTest methodsFor: 'tests-actions' stamp: 'lr 3/9/2006 11:34'!testValidateInvalid	self write: self invalidInstance.	self should: [ self memento validate ] raise: MAValidationError! !!MAMementoTest methodsFor: 'tests-actions' stamp: 'lr 3/9/2006 11:34'!testValidateRequired	self descriptionValue beRequired.	self write: self nullInstance.	self should: [ self memento validate ] raise: MAValidationError! !!MAMementoTest methodsFor: 'tests-basic' stamp: 'lr 3/9/2006 11:34'!testWrite	self subclassResponsibility! !!MAMementoTest methodsFor: 'accessing-model' stamp: 'lr 3/9/2006 11:34'!value	^ value! !!MAMementoTest methodsFor: 'accessing-model' stamp: 'lr 3/9/2006 11:34'!value: anObject	value := anObject! !!MAMementoTest methodsFor: 'accessing-memento' stamp: 'lr 3/9/2006 11:34'!write: anObject	self memento write: anObject using: self descriptionValue! !MAMementoTest subclass: #MAStraitMementoTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Magritte-Tests-Model-Memento'!!MAStraitMementoTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!isAbstract	^ false! !!MAStraitMementoTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:35'!actualClass	^ MAStraitMemento! !!MAStraitMementoTest methodsFor: 'tests-actions' stamp: 'lr 3/9/2006 11:35'!testCommit	self write: self includedInstance.	self assert: self value = self includedInstance.	self assert: self read = self includedInstance.	self memento commit.	self assert: self value = self includedInstance.	self assert: self read = self includedInstance! !!MAStraitMementoTest methodsFor: 'tests-basic' stamp: 'lr 3/9/2006 11:35'!testRead	self assert: self read = self defaultInstance.	self value: self includedInstance.	self assert: self read = self includedInstance.	self value: self defaultInstance.	self assert: self read = self defaultInstance! !!MAStraitMementoTest methodsFor: 'tests-actions' stamp: 'lr 3/9/2006 11:35'!testReset	self write: self includedInstance.	self memento reset.	self assert: self read = self includedInstance! !!MAStraitMementoTest methodsFor: 'tests-actions' stamp: 'lr 3/9/2006 11:35'!testValidateRequired! !!MAStraitMementoTest methodsFor: 'tests-basic' stamp: 'lr 3/9/2006 11:35'!testWrite	self write: self includedInstance.	self assert: self value = self includedInstance.	self write: self defaultInstance.	self assert: self value = self defaultInstance.	self write: self nullInstance.	self assert: self value = self nullInstance! !!MAObjectTest class methodsFor: 'building' stamp: 'AvO 3/12/2012 16:38'!buildTestClassFor: aClass 	"Utility method to create test cases for each object. Use like:		 self buildTestClassFor: MAObject "	| thisName thisClass thisCategory parentClass |	thisName := (aClass name , 'Test') asSymbol.	(thisName beginsWithSubCollection: 'MA') ifFalse: [ ^ self ].	thisClass := GRPlatform current magritteClassNamed: thisName.	thisCategory := 'Magritte-Tests-Model-' , (aClass category copyAfterLast: $-).	parentClass := self = thisClass 		ifTrue: [ self superclass ]		ifFalse: 			[ GRPlatform current magritteClassNamed: (aClass superclass name , 'Test') asSymbol ].	thisClass := parentClass 		subclass: thisName		instanceVariableNames: (thisClass isNil 				ifFalse: [ thisClass instanceVariablesString ]				ifTrue: [ String new ])		classVariableNames: ''		poolDictionaries: ''		category: thisCategory.	thisClass 		compile: 'actualClass	^ ' , aClass name		classified: #private.	thisClass class 		compile: 'isAbstract	^ ' , aClass isAbstract greaseString		classified: #testing.	aClass subclassesDo: [ :each | self buildTestClassFor: each ]! !!MAObjectTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!isAbstract	^ true! !!MAObjectTest class methodsFor: 'accessing' stamp: 'lr 4/12/2009 00:28'!packageNamesUnderTest	^ #('Magritte-Model')! !!MAObjectTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:35'!shouldInheritSelectors	^ true! !!MAObjectTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:34'!actualClass	^ MAObject! !!MAObjectTest methodsFor: 'accessing' stamp: 'lr 4/5/2007 17:12'!instance	self subclassResponsibility! !!MAObjectTest methodsFor: 'tests-copying' stamp: 'lr 3/9/2006 11:34'!testCopy	self assert: self instance = self instance copy.	self deny: self instance == self instance copy! !!MAObjectTest methodsFor: 'tests-copying' stamp: 'lr 5/14/2008 20:32'!testCopyProperties	self deny: self instance properties == self instance copy properties! !!MAObjectTest methodsFor: 'tests-comparing' stamp: 'lr 3/9/2006 11:34'!testEqual	self assert: self instance = self instance.	self assert: self instance = self instance copy.	self assert: self instance copy = self instance.	self deny: self instance = 123.	self deny: self instance = String new! !!MAObjectTest methodsFor: 'tests-comparing' stamp: 'lr 3/9/2006 11:34'!testHash	self assert: self instance hash isInteger.	self assert: self instance hash = self instance hash.	self assert: self instance hash = self instance copy hash! !!MAObjectTest methodsFor: 'tests-testing' stamp: 'lr 10/28/2007 10:18'!testIsDescription	self deny: self instance isDescription! !!MAObjectTest methodsFor: 'tests-properties' stamp: 'lr 3/9/2006 11:34'!testProperties	self assert: self instance properties notNil.	self instance instVarNamed: 'properties' put: nil.	self instance propertyAt: #foo put: #bar.	self instance instVarNamed: 'properties' put: nil.	self instance propertyAt: #foo ifAbsent: [ nil ].	self instance instVarNamed: 'properties' put: nil.	self instance propertyAt: #foo ifAbsentPut: [ #bar ].	self instance instVarNamed: 'properties' put: nil.	self instance hasProperty: #foo.	self instance instVarNamed: 'properties' put: nil! !!MAObjectTest methodsFor: 'tests-properties' stamp: 'lr 3/5/2007 13:52'!testPropertiesAt	self assert: (self instance propertyAt: #foo put: 'bar') = 'bar'.	self assert: (self instance propertyAt: #foo) = 'bar'.	self should: [ self instance propertyAt: #bar ] raise: MAPropertyError! !!MAObjectTest methodsFor: 'tests-properties' stamp: 'lr 3/9/2006 11:34'!testPropertiesAtIfAbsent	self assert: (self instance propertyAt: #foo put: 'bar') = 'bar'.	self assert: (self instance propertyAt: #foo ifAbsent: [ 'baz' ]) = 'bar'.	self assert: (self instance propertyAt: #bar ifAbsent: [ 'baz' ]) = 'baz'! !!MAObjectTest methodsFor: 'tests-properties' stamp: 'lr 3/9/2006 11:34'!testPropertiesAtIfAbsentPut	self assert: (self instance propertyAt: #foo put: 'bar') = 'bar'.	self assert: (self instance propertyAt: #foo ifAbsentPut: [ 'baz' ]) = 'bar'.	self assert: (self instance propertyAt: #foo) = 'bar'.	self assert: (self instance propertyAt: #bar ifAbsentPut: [ 'baz' ]) = 'baz'.	self assert: (self instance propertyAt: #bar) = 'baz'! !!MAObjectTest methodsFor: 'tests-properties' stamp: 'lr 4/10/2008 13:56'!testPropertiesAtIfPresent	self assert: (self instance propertyAt: #foo ifPresent: [ :value | self assert: false ]) isNil.	self instance propertyAt: #foo put: 1.	self assert: (self instance propertyAt: #foo ifPresent: [ :value | self assert: value = 1. 2 ]) = 2! !!MAObjectTest methodsFor: 'tests-properties' stamp: 'lr 3/9/2006 11:34'!testPropertiesAtPut	self instance propertyAt: #foo put: 'bar'.	self assert: (self instance propertyAt: #foo) = 'bar'.	self instance propertyAt: #foo put: 'baz'.	self assert: (self instance propertyAt: #foo) = 'baz'! !!MAObjectTest methodsFor: 'tests-properties' stamp: 'lr 3/9/2006 11:34'!testPropertiesHas	self deny: (self instance hasProperty: #foo).	self instance propertyAt: #foo put: 'bar'.	self assert: (self instance hasProperty: #foo).	self deny: (self instance hasProperty: #bar)! !!MAObjectTest methodsFor: 'tests' stamp: 'lr 3/9/2006 11:34'!testSanity	"If this test case fails, there is something wrong with the setup of the test-case."	self		assert: self actualClass isAbstract not		description: 'Unable to test abstract class.'.	self		assert: self instance class = self actualClass		description: 'Invalid test instance.'! !TestCase subclass: #MATableModelTest	instanceVariableNames: 'table'	classVariableNames: ''	poolDictionaries: ''	category: 'Magritte-Tests-Model-Models'!!MATableModelTest methodsFor: 'running' stamp: 'lr 3/9/2006 11:35'!setUp	table := (MATableModel rows: 3 columns: 4)		collect: [ :row :col :value | row raisedTo: col ]! !!MATableModelTest methodsFor: 'tests-accessing' stamp: 'lr 3/21/2006 20:04'!testAtAt	self assert: (table at: 1 at: 1) = 1.	self assert: (table at: 2 at: 3) = 8.	self assert: (table at: 3 at: 2) = 9.	self assert: (table at: 3 at: 4) = 81! !!MATableModelTest methodsFor: 'tests-accessing' stamp: 'lr 3/9/2006 11:35'!testAtAtAbsent	self should: [ table at: 0 at: 1 ] raise: Error.	self should: [ table at: 1 at: 0 ] raise: Error.	self should: [ table at: 4 at: 4 ] raise: Error.	self should: [ table at: 3 at: 5 ] raise: Error! !!MATableModelTest methodsFor: 'tests-accessing' stamp: 'lr 3/9/2006 11:35'!testAtAtPut	self assert: (table at: 1 at: 1 put: -1) = -1.	self assert: (table at: 2 at: 3 put: -8) = -8.	self assert: (table at: 3 at: 2 put: -9) = -9.	self assert: (table at: 3 at: 4 put: -81) = -81.	self assert: (table at: 1 at: 1) = -1.	self assert: (table at: 2 at: 3) = -8.	self assert: (table at: 3 at: 2) = -9.	self assert: (table at: 3 at: 4) = -81! !!MATableModelTest methodsFor: 'tests-accessing' stamp: 'lr 3/9/2006 11:35'!testAtAtPutAbsent	self should: [ table at: 0 at: 1 put: 0 ] raise: Error.	self should: [ table at: 1 at: 0 put: 0 ] raise: Error.	self should: [ table at: 4 at: 4 put: 0 ] raise: Error.	self should: [ table at: 3 at: 5 put: 0 ] raise: Error! !!MATableModelTest methodsFor: 'tests-enumerating' stamp: 'lr 3/9/2006 11:35'!testCollect	table := table collect: [ :row :col :val | row + col + val ].	table do: [ :row :col :val | self assert: (row raisedTo: col) = (val - row - col) ]! !!MATableModelTest methodsFor: 'tests-accessing' stamp: 'lr 3/9/2006 11:35'!testContents	self assert: table contents = #( 1 1 1 1 2 4 8 16 3 9 27 81 )! !!MATableModelTest methodsFor: 'tests-copying' stamp: 'lr 3/9/2006 11:35'!testCopy	self assert: table copy rowCount = table rowCount.	self assert: table copy columnCount = table columnCount.	self assert: table copy contents = table contents.	self deny: table copy contents == table contents! !!MATableModelTest methodsFor: 'tests-copying' stamp: 'lr 3/9/2006 11:35'!testCopyEmpty	self assert: table copyEmpty rowCount = table rowCount.	self assert: table copyEmpty columnCount = table columnCount.	self assert: (table copyEmpty contents allSatisfy: [ :each | each isNil ])! !!MATableModelTest methodsFor: 'tests-copying' stamp: 'lr 3/9/2006 11:35'!testCopyRowsColumns	self assert: (table copyRows: 1 columns: 2) rowCount = 1.	self assert: (table copyRows: 1 columns: 2) columnCount = 2.	self assert: (table copyRows: 1 columns: 2) contents = #(1 1).	self assert: (table copyRows: 4 columns: 3) rowCount = 4.	self assert: (table copyRows: 4 columns: 3) columnCount = 3.	self assert: (table copyRows: 4 columns: 3) contents = #(1 1 1 2 4 8 3 9 27 nil nil nil)! !!MATableModelTest methodsFor: 'tests-accessing' stamp: 'lr 3/9/2006 11:35'!testCoumnCount	self assert: table columnCount = 4! !!MATableModelTest methodsFor: 'tests-enumerating' stamp: 'lr 3/9/2006 11:35'!testDo	table do: [ :row :col :val | self assert: (row raisedTo: col) = val ]! !!MATableModelTest methodsFor: 'tests-comparing' stamp: 'lr 3/21/2006 18:43'!testEqual	self assert: table = table.	self assert: table = table copy.	self assert: table copy = table.	self assert: table copy = table copy.	self deny: table = (table copy at: 1 at: 2 put: 3).	self deny: table = (table copyRows: 3 columns: 3).	self deny: table = (table copyRows: 4 columns: 4)! !!MATableModelTest methodsFor: 'tests-comparing' stamp: 'lr 3/9/2006 11:35'!testHash	self assert: table hash = table hash.	self assert: table hash = table copy hash.	self assert: table copy hash = table hash.	self assert: table copy hash = table copy hash! !!MATableModelTest methodsFor: 'tests-accessing' stamp: 'lr 3/9/2006 11:35'!testRowCount	self assert: table rowCount = 3! !!MATableModelTest methodsFor: 'tests' stamp: 'lr 3/9/2006 11:35'!testSetup	self assert: table rowCount = 3.	self assert: table columnCount = 4.	self assert: table contents = #( 1 1 1 1 2 4 8 16 3 9 27 81 )! !Object subclass: #MAAccessorMock	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Magritte-Tests-Model-Accessor'!Object subclass: #MAMockAddress	instanceVariableNames: 'place street plz'	classVariableNames: ''	poolDictionaries: ''	category: 'Magritte-Tests-Model-Mocks'!!MAMockAddress class methodsFor: 'descriptions-extensions' stamp: 'lr 8/23/2008 12:04'!descriptionNilled1	^ nil! !!MAMockAddress class methodsFor: 'descriptions-extensions' stamp: 'lr 8/23/2008 12:04'!descriptionNilled1: aDescription	^ aDescription beRequired! !!MAMockAddress class methodsFor: 'descriptions-extensions' stamp: 'lr 8/23/2008 12:03'!descriptionNilled2	^ MAStringDescription new! !!MAMockAddress class methodsFor: 'descriptions-extensions' stamp: 'lr 8/23/2008 12:03'!descriptionNilled2: aDescription	^ nil! !!MAMockAddress class methodsFor: 'descriptions' stamp: 'lr 5/17/2009 22:37'!descriptionPlace	^ MAStringDescription new		accessor: #place;		label: 'Place';		yourself! !!MAMockAddress class methodsFor: 'descriptions-extensions' stamp: 'lr 8/23/2008 11:57'!descriptionPlace: aDescription	^ aDescription beRequired! !!MAMockAddress class methodsFor: 'descriptions-extensions' stamp: 'lr 8/23/2008 12:04'!descriptionPlaceOther: aDescription	^ aDescription beHidden! !!MAMockAddress class methodsFor: 'descriptions' stamp: 'lr 5/17/2009 22:37'!descriptionPlz	^ MANumberDescription new		accessor: #plz;		label: 'PLZ';		yourself! !!MAMockAddress class methodsFor: 'descriptions' stamp: 'lr 5/17/2009 22:37'!descriptionStreet	^ MAStringDescription new		accessor: #street;		label: 'Street';		yourself! !!MAMockAddress methodsFor: 'comparing' stamp: 'lr 2/16/2007 08:50'!= anObject	^ self species = anObject species		and: [ self street = anObject street		and: [ self plz = anObject plz		and: [ self place = anObject place ] ] ]! !!MAMockAddress methodsFor: 'comparing' stamp: 'lr 3/9/2006 11:34'!hash	^ self street hash! !!MAMockAddress methodsFor: 'accessing-generated' stamp: 'lr 3/9/2006 11:34'!place	^ place! !!MAMockAddress methodsFor: 'accessing-generated' stamp: 'lr 3/9/2006 11:34'!place: anObject	place := anObject! !!MAMockAddress methodsFor: 'accessing-generated' stamp: 'lr 3/9/2006 11:34'!plz	^ plz! !!MAMockAddress methodsFor: 'accessing-generated' stamp: 'lr 3/9/2006 11:34'!plz: anObject	plz := anObject! !!MAMockAddress methodsFor: 'accessing-generated' stamp: 'lr 3/9/2006 11:34'!street	^ street! !!MAMockAddress methodsFor: 'accessing-generated' stamp: 'lr 3/9/2006 11:34'!street: anObject	street := anObject! !